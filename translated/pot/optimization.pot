# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, Regents of the University of Minnesota
# This file is distributed under the same license as the MapServer package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MapServer 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-01 14:35\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../en/optimization/debugging.txt:8
# 5538b7acb00b466ca35e3c1e4dec370d
msgid "Debugging MapServer"
msgstr ""

#: ../../../en/optimization/debugging.txt:10
# 586b51531b1f4ae9a0877108db7840bf
msgid "Jeff McKenna"
msgstr ""

#: ../../../en/optimization/debugging.txt:11
# cec31d35e3294ef592807a24a98b3757
msgid "jmckenna at gatewaygeomatics.com"
msgstr ""

#: ../../../en/optimization/debugging.txt:12
# f183220887584ee9bcbbd951039cabb8
msgid "2010-05-07"
msgstr ""

#: ../../../en/optimization/debugging.txt:19
#: ../../../en/optimization/fastcgi.txt:24
#: ../../../en/optimization/mapfile.txt:21
#: ../../../en/optimization/tileindex.txt:20
# 4bc43b324d894430a94cf39369f1227d
# f9baec400a9242539a22f6310192da57
# 6c5f3e15f69d4f3d9216d2d3fb022544
# 172d64c016684f1a80f536276e50ff7d
msgid "Introduction"
msgstr ""

#: ../../../en/optimization/debugging.txt:21
# aa564ad57e21491c83a99de2b00b7c06
msgid "When developing an application for the Internet, you will inevitably across problems many problems in your environment.  The goal of this guide is to assist you with locating the problem with your MapServer application."
msgstr ""

#: ../../../en/optimization/debugging.txt:27
# b3322c531313413098de447cca82a899
msgid "Links to Related Information"
msgstr ""

#: ../../../en/optimization/debugging.txt:29
# 7f1a302d1e2343538ace7173d5a7a8b7
msgid ":ref:`RFC 28: Redesign of LOG/DEBUG output mechanisms <rfc28>`"
msgstr ""

#: ../../../en/optimization/debugging.txt:30
# ddd3f5e902b04441a2d9316a3f8c579e
msgid ":ref:`MapServer Errors <errors>`"
msgstr ""

#: ../../../en/optimization/debugging.txt:33
# 8b69297dff4a4a0493ca94518fd4cb4b
msgid "Steps to Enable MapServer Debugging"
msgstr ""

#: ../../../en/optimization/debugging.txt:35
# b480447411e54b9896f20a0a6744f138
msgid "Starting with MapServer 5.0, you are able to control the levels of debugging/logging information returned to you by MapServer, and also control the location of the output log file."
msgstr ""

#: ../../../en/optimization/debugging.txt:39
# 38c34067acde42a0998a851140c8557c
msgid "In technical terms, there are msDebug() calls in various areas of the MapServer code that generate information that may be useful in tuning and troubleshooting applications."
msgstr ""

#: ../../../en/optimization/debugging.txt:47
# a8b5b10cd64c4a4382d677d5e6f747db
msgid "Step 1: Set the MS_ERRORFILE Variable"
msgstr ""

#: ../../../en/optimization/debugging.txt:49
# aa8fdd6618974891a59d8c2cd489752c
msgid "The **MS_ERRORFILE** variable is used to specify the output of debug messages from MapServer.  You can pass the following values to **MS_ERRORFILE**:"
msgstr ""

#: ../../../en/optimization/debugging.txt:54
# ff4edcd90b1b4125b3dba138911e67bf
msgid "Full path and filename of a log file, to contain MapServer's debug messages.  Any file extension can be used, but *.log* or *.txt* is recommended.  The file will be created, if it does not already exist."
msgstr ""

#: ../../../en/optimization/debugging.txt:59
# c3a2a584ec774075b69d8c6cab225674
msgid "Starting with MapServer 6.0, a filename with relative path can be passed via the CONFIG MS_ERRORFILE directive, in which case the filename is relative to the mapfile location. Note that setting MS_ERRORFILE via an environment variable always requires an absolute path since there would be no mapfile to make the path relative to."
msgstr ""

#: ../../../en/optimization/debugging.txt:66
# 593091bc1d584413b9c23f33d2af2731
msgid "Use this to send MapServer's debug messages to the Web server's log file (i.e. \"standard error\").  If you are using Apache, your debug messages will be placed in the Apache *error_log* file.  If you are using Microsoft IIS, your debug messages will be sent to *stdout* (i.e. the browser), so its use is discouraged. With IIS it is recommended to direct output to a file instead."
msgstr ""

#: ../../../en/optimization/debugging.txt:74
# f9ac7fc39c704f0ba81291ff80fa84d4
msgid "Use this to send MapServer's debug messages to the standard output (i.e. the browser), combined with the rest of MapServer's output."
msgstr ""

#: ../../../en/optimization/debugging.txt:78
# 8d8944f20b2f488d810d2aeab6b3507a
msgid "Use this to send MapServer's debug messages to the Windows OutputDebugString API, allowing the use of external programs like SysInternals debugview to display the debug output."
msgstr ""

#: ../../../en/optimization/debugging.txt:84
# f09bef4dd8384f0b975e653b13737821
msgid "Through the Mapfile"
msgstr ""

#: ../../../en/optimization/debugging.txt:86
# b61955e8231f4c4e861d78af678de174
msgid "The recommended way to set the **MS_ERRORFILE** variable is in your mapfile, within the :ref:`MAP` object, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:101
# e75fbaf6766b46fe8493d189db214b1c
msgid "Through an Environment Variable"
msgstr ""

#: ../../../en/optimization/debugging.txt:103
# c51d1e5191f94cfa93e32d87cffe6d98
msgid "You can also set the **MS_ERRORFILE** variable as an environment variable on your system.  Apache users can set the environment variable in Apache's *httpd.conf* file, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:111
#: ../../../en/optimization/debugging.txt:220
# c6d72aa0ed354bcc9fbb889253ec16d5
# 15b1df0b860d45de9dc61cf81ee1e342
msgid "Windows users can alternatively set the environment variable through the Windows System Properties; but make sure to set a SYSTEM environment variable."
msgstr ""

#: ../../../en/optimization/debugging.txt:116
# ef8f614bb13543fd99d8a9da3ebfd2a6
msgid "If both the *MS_ERRORFILE* environment variable is set and a *CONFIG MS_ERRORFILE* is also set, then the CONFIG directive takes precedence."
msgstr ""

#: ../../../en/optimization/debugging.txt:124
# e39c9bd81d2b4412a83a6c4d5ca827f6
msgid "Step 2: Set the DEBUG Level"
msgstr ""

#: ../../../en/optimization/debugging.txt:126
# 44824582720b41958a1ce2be2c43d5b2
msgid "You can retrieve varying types of debug messages by setting the *DEBUG* parameter in the :ref:`mapfile`.  You can place the *DEBUG* parameter in any LAYER in the mapfile, or instead, set it once in the MAP object so that it applies to each layer.  Use the value of the *DEBUG* parameter to set the type of information returned, as follows:"
msgstr ""

#: ../../../en/optimization/debugging.txt:133
# 8853197c632f48bd82a15be7914e5482
msgid "DEBUG Levels"
msgstr ""

#: ../../../en/optimization/debugging.txt:136
# 9abcc558a89d4608be6256fc147bcfed
msgid "Errors only (DEBUG OFF, or DEBUG 0)"
msgstr ""

#: ../../../en/optimization/debugging.txt:138
# 769e9bb279ef44088886095860067e1e
msgid "In level 0, only msSetError() calls are logged to MS_ERORFILE. No msDebug() output at all.  This is the default and corresponds to the original behavior of MS_ERRORFILE in MapServer 4.x"
msgstr ""

#: ../../../en/optimization/debugging.txt:143
# a7a679de503f442d958346e4339933b3
msgid "Errors and Notices (DEBUG ON, or DEBUG 1)"
msgstr ""

#: ../../../en/optimization/debugging.txt:145
# d558dedb73114906a78d6ed3dca86d01
msgid "Level 1 includes all output from Level 0 plus msDebug() warnings about common pitfalls, failed assertions or non-fatal error situations (e.g. missing or invalid values for some parameters, missing shapefiles in tileindex, timeout error from remote WMS/WFS servers, etc.)"
msgstr ""

#: ../../../en/optimization/debugging.txt:152
# 0e3b3dde47a34f12872c0aa62ccb2464
msgid "Map Tuning (DEBUG 2)"
msgstr ""

#: ../../../en/optimization/debugging.txt:154
# a139e5f670814e77a40244d9ce3b142f
msgid "Level 2 includes all output from Level 1 plus notices and timing information useful for tuning mapfiles and applications.  *this is the recommended minimal debugging level*"
msgstr ""

#: ../../../en/optimization/debugging.txt:159
# 008a5874f9de4eba8acd715a4e3130fe
msgid "Verbose Debug (DEBUG 3)"
msgstr ""

#: ../../../en/optimization/debugging.txt:161
# fde4a9703b764a87b39813fa98d05556
msgid "All of Level 2 plus some debug output useful in troubleshooting problems such as WMS connection URLs being called, database connection calls, etc."
msgstr ""

#: ../../../en/optimization/debugging.txt:166
# 74ff679020bd43038fb096c55f6c3be2
msgid "Very Verbose Debug (DEBUG 4)"
msgstr ""

#: ../../../en/optimization/debugging.txt:168
# 2b8916c12eb74d70a7d52b4ac354d01e
msgid "Level 3 plus even more details..."
msgstr ""

#: ../../../en/optimization/debugging.txt:171
# ae2566f3c8cc49ae896b9326c6ad5bfe
msgid "Very Very Verbose Debug (DEBUG 5)"
msgstr ""

#: ../../../en/optimization/debugging.txt:173
# f24e0f71288e4bdb835e8db972db773f
msgid "Level 4 plus any msDebug() output that might be more useful to developers than to users."
msgstr ""

#: ../../../en/optimization/debugging.txt:178
# d0d45d6b41ce4d238e9e638b695610f0
msgid "Mapfile Example"
msgstr ""

#: ../../../en/optimization/debugging.txt:180
# 50345dc691854b7a86b4957ecbadf24e
msgid "The following example is the recommended method to set the *DEBUG* parameter:"
msgstr ""

#: ../../../en/optimization/debugging.txt:198
# 7c14ffed4668411dbdcc7406648a8223
msgid "The MS_DEBUGLEVEL Environment Variable"
msgstr ""

#: ../../../en/optimization/debugging.txt:200
# 5149c0e14bca4d778f1074bea248aafb
msgid "Instead of setting the *DEBUG* Debug level in each of your mapfiles, you can also be set the level globally by using the *MS_DEBUGLEVEL* environment variable."
msgstr ""

#: ../../../en/optimization/debugging.txt:204
# f0ee370d75f849a19d9582ef623ebc52
msgid "When set, this value is used as the default debug level value for all map and layer objects as they are loaded by the mapfile parser. This option also sets the debug level for any msDebug() call located outside of the context of a map or layer object, for instance for debug statements relating to initialization before a map is loaded. If a DEBUG value is also specified in the mapfile in some map or layer objects then the local value (in the mapfile) takes precedence over the value of the environment variable."
msgstr ""

#: ../../../en/optimization/debugging.txt:213
# e8598b4589bb4800b3432f92e551c31b
msgid "Apache users can set the environment variable in Apache's *httpd.conf* file, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:228
# ee1f44b5715d44909745d0c2f1aed0fb
msgid "Step 3: Turn on CPL_DEBUG (optional)"
msgstr ""

#: ../../../en/optimization/debugging.txt:230
# 06dff5ebb0a54fe2ba6f02314795f686
msgid "MapServer relies on the `GDAL <http://www.gdal.org/>`__ library to access most data layers, so you may wish to turn on GDAL debugging, to hopefully get more information on how GDAL is accessing your data file.  This could be very helpful for problems with accessing raster files and PostGIS tables.  You can trigger this GDAL output by setting the **CPL_DEBUG** variable in your mapfile, within the :ref:`MAP` object, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:253
# f5827b0dbd3f412d8796129b31cbd379
msgid "Step 4: Turn on PROJ_DEBUG (optional)"
msgstr ""

#: ../../../en/optimization/debugging.txt:255
# 1ddef3227156468499c375bde77aa1ed
msgid "MapServer relies on the `PROJ.4 <http://trac.osgeo.org/proj/>`__ library to handle data projections, so you may wish to turn on PROJ debugging, to hopefully get more information back from the PROJ library.  You can trigger this PROJ output by setting the **PROJ_DEBUG** variable in your mapfile, within the :ref:`MAP` object, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:274
# 0a9fe7f68654433d8ad3d77cd5127e32
msgid "Step 5: Test your Mapfile"
msgstr ""

#: ../../../en/optimization/debugging.txt:276
# 42f64a848731417a8f50fd5b05a3dbe7
msgid "Once you have set the *MS_ERRORFILE* and *DEBUG* level in your mapfile, you should now test your mapfile and read your generated log file."
msgstr ""

#: ../../../en/optimization/debugging.txt:284
# d8f5f0fbc4d149c3b536f25240ffae8e
msgid "Using shp2img"
msgstr ""

#: ../../../en/optimization/debugging.txt:286
# 0297167556944db19de945c03bc0141f
msgid "The recommended way to test your mapfile is to use the MapServer commandline utility :ref:`shp2img`, to verify that your mapfile creates a valid map image. :ref:`shp2img` should be included in your MapServer installation (`MS4W <http://www.maptools.org/ms4w>`__ users need to execute *setenv.bat* before using the utility)."
msgstr ""

#: ../../../en/optimization/debugging.txt:292
# 285b6e99c30d4cc484cc035f1e5a35c0
msgid "You can set the *DEBUG* level by passing the :ref:`shp2img` following parameters to your commandline call:"
msgstr ""

#: ../../../en/optimization/debugging.txt:296
# 87dd152b64754012b19e581c19b99dce
msgid "If you have already set *MS_ERRORFILE* in your mapfile, you must comment this out in order to use these :ref:`shp2img` options"
msgstr ""

#: ../../../en/optimization/debugging.txt:300
# 88f1213bd2e843f08d6858c78d56ca9f
msgid "When using :ref:`shp2img` to debug, your layer's STATUS should be set to ON or DEFAULT.  If the layer's STATUS is set to OFF, you must additionally pass the layer name to :ref:`shp2img` by using the \"``-l layername``\" syntax"
msgstr ""

#: ../../../en/optimization/debugging.txt:306
# d92b59dedbd045ab8d5f11935da870c1
msgid "-all_debug"
msgstr ""

#: ../../../en/optimization/debugging.txt:308
# 739365baa72643179843cdf8355b3a4e
msgid "Use this setting to set the debug level for the MAP object and all layers. *this is the recommended switch to use*"
msgstr ""

#: ../../../en/optimization/debugging.txt:337
# 6093f6a21950460f9f4f5c502f778105
msgid "-map_debug"
msgstr ""

#: ../../../en/optimization/debugging.txt:339
# 5b5911fe934a4938b4ead4cb836ae1c9
msgid "Use this setting to set the debug level for the MAP object only."
msgstr ""

#: ../../../en/optimization/debugging.txt:357
# e4276c9d4e1e4c8e9a98b54df76b4b38
msgid "-layer_debug"
msgstr ""

#: ../../../en/optimization/debugging.txt:359
# 6f2f2485371d4589942285451df6642e
msgid "Use this setting to set the debug level for one layer object only."
msgstr ""

#: ../../../en/optimization/debugging.txt:373
# 3c51c5c75d784c8f81fd6e0649699a64
msgid "Set CPL_DEBUG"
msgstr ""

#: ../../../en/optimization/debugging.txt:375
# 088e44671b984c3ebef3e5005d55b4cc
msgid "At the commandline execute the following:"
msgstr ""

#: ../../../en/optimization/debugging.txt:395
# 7ed9beca8310401bac5bc5720c2b8346
msgid "Reading Errors Returned by shp2img"
msgstr ""

#: ../../../en/optimization/debugging.txt:397
# a5e25d27316f4c2eaa37184126dae955
msgid "If there is a problem with your mapfile, :ref:`shp2img` should output the line number in your mapfile that is causing the trouble.  The following tells us that there is a problem on line 85 of my mapfile:"
msgstr ""

#: ../../../en/optimization/debugging.txt:405
# ae58932e148345a488bce29d03b7b536
msgid "If you are using mapfile :ref:`INCLUDEs <include>`, it may be tricky to track down this line number, but most of the time the line number is useful."
msgstr ""

#: ../../../en/optimization/debugging.txt:410
# 9bd838fc25fb41f294bed5023411291b
msgid "Using mapserv CGI"
msgstr ""

#: ../../../en/optimization/debugging.txt:412
# 8dd012e164b347199165a4652d5b0c05
msgid "Another handy way to test your mapfile is to call the mapserv CGI executable at the :ref:`commandline <mapserv>`, such as the following:"
msgstr ""

#: ../../../en/optimization/debugging.txt:423
# ea77f0a2e66e46c79898da0029116d1b
msgid "ON_MISSING_DATA"
msgstr ""

#: ../../../en/optimization/debugging.txt:425
# f462096d8ace435392da382580e82db9
msgid "If you are using tile indexes to access your data, you should also be aware of the configuration settings added in MapServer 5.4 that allow you to tell MapServer how to handle missing data in tile indexes. Please see the *CONFIG* parameter's *ON_MISSING_DATA* setting in the :ref:`map` object for more information."
msgstr ""

#: ../../../en/optimization/debugging.txt:432
# bf7213d8cff943b1bb3a8ea29991cba6
msgid "You can check the attributes in the tileindex by executing \"*ogrinfo -al*\" on your data file"
msgstr ""

#: ../../../en/optimization/debugging.txt:436
# c3e410eaaa954e06ad8a6c423bda311b
msgid "Step 6: Check your Web Server Logs"
msgstr ""

#: ../../../en/optimization/debugging.txt:438
# e5b2a48173af4568aaa39acb3a29d3f3
msgid "Once you have verified that there are no problems with you mapfile, next you should check your Web server log files, for any related information that may help you narrow down your problem."
msgstr ""

#: ../../../en/optimization/debugging.txt:443
# 522463e975924fb08cfc6b29c0987449
msgid "Apache"
msgstr ""

#: ../../../en/optimization/debugging.txt:445
# 3b5c8705b3324998aed2a99f55241fa7
msgid "Unix users will usually find Apache's *error_log* file in a path similar to:"
msgstr ""

#: ../../../en/optimization/debugging.txt:452
# 1b149a7eb8754f5d99b272fafea2af58
msgid "Windows users will usually find Apache's log files in a path similar to:"
msgstr ""

#: ../../../en/optimization/debugging.txt:458
# 9a0b10b3f3e24561890516dedc597dfc
msgid "MapServer for Windows (`MS4W <http://www.maptools.org/ms4w>`__) users will find Apache's log files at:"
msgstr ""

#: ../../../en/optimization/debugging.txt:466
# e443276f87b34c74a95ba7caa30524cd
msgid "Microsoft IIS"
msgstr ""

#: ../../../en/optimization/debugging.txt:468
# 01fb883a7d6049c5886fa5a28df58239
msgid "IIS log files can be located by:"
msgstr ""

#: ../../../en/optimization/debugging.txt:470
#: ../../../en/optimization/debugging.txt:488
# 0ab75fb4a36d4140ac66e19eab8300cf
# 61148bf684e94ea0bb3d879ddd234730
msgid "Go to Start -> Control Panel -> Administrative Tools"
msgstr ""

#: ../../../en/optimization/debugging.txt:471
# 3c0eef57c8ad4306870159ef4c6418ea
msgid "Open the Internet Information Services (IIS) Manager."
msgstr ""

#: ../../../en/optimization/debugging.txt:472
# f027f364d0464329bb42d09c8c49be55
msgid "Find your Web site under the tree on the left."
msgstr ""

#: ../../../en/optimization/debugging.txt:473
# 51e531f6d54347018775916c918c5ae0
msgid "Right-click on it and choose Properties."
msgstr ""

#: ../../../en/optimization/debugging.txt:474
# 35841a2e799849c89f498e6d9418918d
msgid "On the Web site tab, you will see an option near the bottom that says \"Active Log Format.\" Click on the Properties button."
msgstr ""

#: ../../../en/optimization/debugging.txt:479
# db473db03d0b4c4a97dbcc9618bd3b48
msgid "At the bottom of the General Properties tab, you will see a box that contains the log file directory and the log file name. The full log path is comprised of the log file directory plus the first part of the log file name, for example::"
msgstr ""

#: ../../../en/optimization/debugging.txt:486
# 34d45a7a59fb4303bd40a79d76b03680
msgid "You may also want to check the Windows Event Viewer logs, which is located at:"
msgstr ""

#: ../../../en/optimization/debugging.txt:489
# dc0d6540f7764c9594cbda143c0539fb
msgid "Computer Management"
msgstr ""

#: ../../../en/optimization/debugging.txt:490
# 81bd070095d44effa8224e507dd45972
msgid "Event Viewer"
msgstr ""

#: ../../../en/optimization/debugging.txt:493
# a61951130a134b969881ae6955c63ec2
msgid "As mentioned previously, in IIS the MapServer *stderr* debug output is returned to the client instead of routed to the Web Server logs, so be sure to log the output to a file, using:"
msgstr ""

#: ../../../en/optimization/debugging.txt:502
# 8810f312372740c8a5c8dac7151f16e1
msgid "CGI Error - The specified CGI application misbehaved by not returning a complete set of HTTP headers"
msgstr ""

#: ../../../en/optimization/debugging.txt:504
# 69bda7732e2b49c18b57691460850481
msgid "This error is often caused by missing DLL files.  You should try to execute \"*mapserv -v* at the commandline, to make sure that MapServer loads properly."
msgstr ""

#: ../../../en/optimization/debugging.txt:510
# 769c4d98aad9401d8332beb8a259067f
msgid "Step 7: Verify your Application Settings"
msgstr ""

#: ../../../en/optimization/debugging.txt:512
# a6965f0081c348338777b0086792f925
msgid "If you have verified that MapServer creates a valid map image through :ref:`shp2img`, you've checked your MapServer log files, and there are no problems noted in your Web server logs, then you should focus your attention on possible application configuration problems. \"Application\" here means how you are displaying your map images on the Web page, such as with `OpenLayers <http://www.openlayers.org>`__."
msgstr ""

#: ../../../en/optimization/debugging.txt:523
# c9a07e9869bc4f0ab05b064aef075353
msgid "PHP MapScript"
msgstr ""

#: ../../../en/optimization/debugging.txt:525
# ea2518ab116a41b08b177ec17d80c44b
msgid "If you are using PHP MapScript in your application, here are some important notes for debugging:"
msgstr ""

#: ../../../en/optimization/debugging.txt:528
# 93f0bdf849b34accbc776a82ec1f835d
msgid "1. Make sure your *php.ini* file is configured to show all errors, by setting:"
msgstr ""

#: ../../../en/optimization/debugging.txt:536
# 060c9f6ad29446cfab75525a2503a2f6
msgid "To enable debugging in PHP MapScript, if you are using MapServer 5.6.0 or more recent, make sure to define *ZEND_DEBUG* in the PHP source."
msgstr ""

#: ../../../en/optimization/debugging.txt:540
# d468172a7930453b81891fa9eb0b55a8
msgid "If you are using MapServer < 5.6.0, then:"
msgstr ""

#: ../../../en/optimization/debugging.txt:542
# d3869985f43e48a69ad8ac19431d8b73
msgid "open the file */mapscript/php3/php_mapscript.c*"
msgstr ""

#: ../../../en/optimization/debugging.txt:544
# df54fc89e489436cbc08ec8b85f5064a
msgid "change the following:"
msgstr ""

#: ../../../en/optimization/debugging.txt:555
# b2efeaadb31645ca9ac9cc483dcdb755
msgid "Debugging MapServer using Compiler Debugging Tools"
msgstr ""

#: ../../../en/optimization/debugging.txt:561
# 3c14d2010e9d4791b8a11c1b2ad58236
msgid "Running MapServer in GDB (Linux/Unix)"
msgstr ""

#: ../../../en/optimization/debugging.txt:566
# b8962d3bb7d948efa9d3ba22275133d7
msgid "Building with Symbolic Debug Info"
msgstr ""

#: ../../../en/optimization/debugging.txt:568
# 662cd4b6aad74f4ca12028b2ffda126e
msgid "It is not strictly necessary to build MapServer with debugging enabled in order to use `GDB <http://www.gnu.org/software/gdb/>`__ on linux, but it does ensure that more meaningful information is reported within GDB.  To enable full symbolic information use the *--enable-debug* configure switch.  Note that use of this switch disables optimization and so it should not normally be used for production builds where performance is important."
msgstr ""

#: ../../../en/optimization/debugging.txt:583
# b03ecbba6ec449b1b188805daaf404e8
msgid "Running in the Debugger"
msgstr ""

#: ../../../en/optimization/debugging.txt:585
# 08f47454d66c4a9789e957f2e7d3a5d4
msgid "To run either mapserv or shp2img, give the name of the executable as an argument to the \"gdb\" command.  If it is not in the path, you will need to provide the full path to the executable."
msgstr ""

#: ../../../en/optimization/debugging.txt:604
# 3241f623441442bfb408c335c3ff640a
msgid "Once you are at the \"(gdb)\" prompt you can use the run command with the arguments you would normally have passed to the mapserv or shp2img executable."
msgstr ""

#: ../../../en/optimization/debugging.txt:622
# 8078c622647b44dcb88cc3920a2657dc
msgid "If the program is crashing, you will generally get a report like the above indicating the function the crash occurred in, and some minimal information on why.  It is often useful to request a traceback to see what functions led to the function that crashed.  For this use the \"where\" command."
msgstr ""

#: ../../../en/optimization/debugging.txt:651
# 8fdbbe363695441abd17380a33653847
msgid "It may also be helpful to examine variables used in the line where the crash occured.  Use the print command for this."
msgstr ""

#: ../../../en/optimization/debugging.txt:659
# 20ed4b3034224a1aa25ff10b52005922
msgid "In this case we see that the program crashed because poOpenInfo was NULL (zero).  Including a traceback like the above in bug report can help the developers narrow down a problem more quickly, especially if it is one that is difficult for the developers to reproduce themselves."
msgstr ""

#: ../../../en/optimization/debugging.txt:666
# 8369008ce3d947f4b7a544aaf36a2433
msgid "Debugging Older Versions of MapServer (before 5.0)"
msgstr ""

#: ../../../en/optimization/debugging.txt:668
# 4b7a66df60e24d5495cfab534ea2a8dc
msgid "Make sure that MapServer is compiled in debug mode (on unix this is enabled through *./configure --enable-debug*)."
msgstr ""

#: ../../../en/optimization/debugging.txt:671
# cd0a6e935aba4de884c4e79c754d8bfa
msgid "You can verify that your build was compiled in debug mode, by executing the following at the commandline (look for \"DEBUG=MSDEBUG\"):"
msgstr ""

#: ../../../en/optimization/debugging.txt:685
# eac01a7db7ef4375a1671add2ac085d3
msgid "Set the *MS_ERRORFILE* variable is in your mapfile, within the :ref:`MAP` object, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:699
# 9b08ae16054b483a8ae73922613ae785
msgid "If you don't use the *MS_ERRORFILE* variable, you can use the LOG parameter in your :ref:`WEB` object of the mapfile, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:715
# b63d1f2e9fa0406a84044a63bc88984a
msgid "Specify *DEBUG ON* in your MAP object, or in your LAYER objects, such as:"
msgstr ""

#: ../../../en/optimization/debugging.txt:732
# e28418ba7ba345d7bc12923aa51bd6f6
msgid "Note that only errors will be written to the log file; all DEBUG output goes to stderr, in the case of Apache that is Apache's *error_log* file. If you are using Microsoft IIS, debug output is routed to *stdout* (i.e. the browser), so be sure to remove *DEBUG ON* statements if using IIS on a production server."
msgstr ""

#: ../../../en/optimization/debugging.txt:738
# caf415a3e2fd42ca94fd80201ece1565
msgid "."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:8
# e73ac62fd102451bb9e2de0a1c581eac
msgid "FastCGI"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:10
# 2b30181544524c208a098b063c1dc64e
msgid "Frank Warmerdam"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:11
# c99d695ef60945fdbb8fef222930a022
msgid "warmerdam at pobox.com"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:12
# 59d168a4a00a4c2c859ea847cd885b59
msgid "Howard Butler"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:13
# ee511f751d814b24af7247e4abd3a390
msgid "hobu.inc at gmail.com"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:14
#: ../../../en/optimization/mapfile.txt:12
#: ../../../en/optimization/raster.txt:11
#: ../../../en/optimization/tileindex.txt:11
#: ../../../en/optimization/vector.txt:11
# dac359d17a0243b9b1e9b7ae3a2358fa
# 48da48d237344e9f8dfcbab903eb7843
# b9fd2deb8135403c8b096e6a0572b04f
# 8b5eabed863d47b68124e113f5d500ab
# d0392db8c86a4b059b4f91cbc786c9d8
msgid "$Revision$"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:15
#: ../../../en/optimization/mapfile.txt:13
#: ../../../en/optimization/raster.txt:12
#: ../../../en/optimization/tileindex.txt:12
#: ../../../en/optimization/vector.txt:12
# 487925a8ef6946b3bc7dcd4c1b985751
# 1d29bf14aaf842049dc96ecfec476c36
# 3650209e01934219b6cfa85f02003f05
# 67fc3371bbe347b1a1dc495434eafea5
# 49628d443be045ada9d6989fd3b1e2ed
msgid "$Date$"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:16
# ebc6b75545094573b8cdd70a5dc21d69
msgid "2008/07/15"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:26
# 0eb19349ac8b40b6a4c9ed05ae3d32ee
msgid "FastCGI is a protocol for keeping cgi-bin style web applications running as a daemon to take advantage of preserving memory caches, and amortizing other high startup costs (like heavy database connections) over many requests."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:32
# df153305fbf940779423667a72705cee
msgid "Obtaining the necessary software"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:34
# adddbfad74b64bd7b6e498175d4a91af
msgid "There are three pieces to the MapServer FastCGI puzzle.  First, you need the actual FastCGI library.  This can be downloaded from `http://www.fastcgi.com/ <http://www.fastcgi.com/>`__.  This library does the usual *configure, make, make install* dance.  One added complication is that it installs by default in /usr/local, and you might give the *configure* command a --prefix=/usr to put it in a location that is already visible to ldconfig."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:42
# 96017a1bddc54db29f25bf2a07a26571
msgid "Assuming you are running `Apache <http://httpd.apache.org>`__, the next piece you need is mod_fcgi.  Mod_fcgi depends on the version of Apache you are running, so make sure to download the correct fork (Apache 1.3 vs. Apache 2)."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:47
# 4c27fcbe1dec4f1988e99fea14eb82fe
msgid "The third and final piece is to compile MapServer with FastCGI support. This is pretty straightforward, and all you need to do is tell *configure* where the FastCGI library is installed.  If you changed the prefix variable as described above, this would be:"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:56
# 0f521da6402d4fd1a683e0d4bc77d214
msgid "With those pieces in place, the MapServer CGI (mapserv) should now be FastCGI-enabled.  You can verify this by testing it on with the command line:"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:70
# 3da2df618c4b43ebad3e96831b2165c8
msgid "Configuration"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:72
# e6a6832e42c34dbbbc1856d8a5333996
msgid "Modify http.conf to load the FastCGI module."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:78
# 4c90adffdc92489085217fac9d19b866
msgid "Add an Apache handler for FastCGI applications."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:84
# d025f2553bb345f4b93481aa092382de
msgid "Set FastCGI processing information"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:93
# bb5d91ce0d644e339cefca573a8e0c8c
msgid "Install a copy of the mapserv executable (originally **mapserv** or **mapserv.exe**) into the cgi-bin directory with the extension **.fcgi** (ie. **mapserv.fcgi**).  Use this executable when you want to utilize fastcgi support."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:98
# f032f5d18dd64b66bf8f10deb1a3eed3
msgid "For some platforms, the Mapserver link would then have to changed from:"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:105
#: ../../../en/optimization/fastcgi.txt:118
# 445cfce6020d49c482fc991603f544dc
# fa25bd0db6fb4f43a2ab6cc14dedc49a
msgid "To:"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:111
# 703481e1539d47a4bba79adca3015478
msgid "For other platforms, the Mapserver link would then have to changed from:"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:125
# 8595976e78d3421fbeedeadc3178d685
msgid "In your mapfile, set a PROCESSING directive to tell FastCGI to cache the connections and layer information on all layers for which connection caching is desired - ie. all slow layers."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:136
# 0aa97a80de3b4ea3ada3b701011bbf7c
msgid "Common Problems"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:138
# 73abc7e2bfa54894b7f16ae0b8e1bedd
msgid "File permissions"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:139
# 768e3ccae29d4ceb83c72bc4c850f3fd
msgid "Fedora Core 3 doesn't allow FastCGI to write to the process logs (when you use RedHat's Apache 2 rather than your own).  This is described `here <http://www.fastcgi.com/archives/fastcgi-developers/2005-March/003638.html>`__."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:143
# acf5553658124c2a9a774ba6485d1975
msgid "Also, FastCGI needs to write its socket information somewhere.  This can be directed with the *FastCgiIpcDir* directive."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:148
# 69a4a98826054dc49a8028af08c097d3
msgid "FastCGI on Win32"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:151
# 56f1eeee50484c48a88498cc8d62e9f9
msgid "MS4W Users"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:153
# 2480f49efe6d4a089aed3b4509dd225f
msgid "`MS4W (MapServer for Windows)`_ >= version 2.2.2 contains MapServer compiled with FastCGI support. MS4W version >= 2.2.8 also contains the required Apache module (mod_fcgid), and users must follow the `README instructions`_ to setup FastCGI with their application."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:163
# 8f1d1d3f2cb3442fbd3afcd18157bd51
msgid "Building fcgi-2.4.0"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:165
# 38fb66f13edc4118a53b8a1672b2bb24
msgid "I used libfcgi-2.4.0 for use with Apache2 from http://www.fastcgi.com."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:168
# 6fbfffd2647840b7b8c38ed3479181e0
msgid "Binary IO Patch"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:170
# 225c6ee2698f42ca98938230159673f4
msgid "It is critical that stdio be in binary mode when PNG and other binary images are written to it. To accomplish this for stdio handled through the FastCGI library, I had to do the following hack to libfcgi/fcgi_stdio.c within the fcgi-2.4.0 distribution."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:175
# 1a2c56655ade451d816a7c3f52755283
msgid "In FCGI_Accept() made he following change"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:196
# 6a9b829d3d2d4f3bb693f3bba68efd5c
msgid "Also, add the following just before the FCGI_Accept() function"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:205
# 604223416b5d44edb7c6c7bff633c4dc
msgid "I'm sure there is a better way of accomplishing this. If you know how, please let me know!"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:209
# 8f5d94839eed4bd892b6f23049f90b71
msgid "Building libfcgi"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:211
# 87f3f98396814de3b9a9f7c7a7e5cf48
msgid "The makefile.nt should be fine. Just ensure you have run VCVARS32.BAT (as is needed for building MapServer) and then issue the command::"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:216
# cba74e15f9294629b302bf6a983b4f95
msgid "Then the .lib and .dll will be in libfcgi/Debug?. Make sure you copy the DLL somewhere appropriate (such as your cgi-bin directory)."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:220
# cfbebd1fc70a4bd6965df2fc96094f4f
msgid "Other Issues"
msgstr ""

#: ../../../en/optimization/fastcgi.txt:222
# 0823acd5ab0a4e29ba4e57b8263f13cb
msgid "1) FastCGI's receive a very limited environment on win32, seemingly even more restricted than normal cgi's started by apache. Make sure that all DLLs required are either in the fastcgi directory or in windows\\system32. Any missing DLLs will result in very cryptic errors in the error_log, including stuff about Overlapping read requests failing or something like that."
msgstr ""

#: ../../../en/optimization/fastcgi.txt:228
# 49904980a1ed40fd88102b70a4cc4cf6
msgid "2) Make sure you use a libfcgi.dll built against the same runtime library as your mapserv.exe (and possibly libmap_fcgi.dll) or you will suffer a world of pain! Different runtime libraries have different \"environ\" variables (as well as their own stdio and heaps). You can check that everything is using MSVCRT.DLL (or all using MSVCRTD.DLL) using the MS SDK Dependency Walker."
msgstr ""

#: ../../../en/optimization/index.txt:8
# b540119b501a44d79147413c94e3c7fa
msgid "Optimization"
msgstr ""

#: ../../../en/optimization/mapfile.txt:8
# d359f353890b47c98234f1dd16caab54
msgid "Mapfile"
msgstr ""

#: ../../../en/optimization/mapfile.txt:10
# 85c81f172a164b25b9472de5ebe91e69
msgid "David Fawcett"
msgstr ""

#: ../../../en/optimization/mapfile.txt:11
# e31e353dfee94df98b67bf287d057f46
msgid "david.fawcett at gmail.com"
msgstr ""

#: ../../../en/optimization/mapfile.txt:14
# 5af89f86735c4eaca4255337238488bc
msgid "2007/08/01"
msgstr ""

#: ../../../en/optimization/mapfile.txt:23
# b264396618204a86916d41600559960f
msgid "The contents of a Map File are used by MapServer for configuration, data access, projection, and more. Because the Map File is parsed every time a map image is requested, it is important to think about what you include in the file in order to optimize performance. The optimal Map File is one that doesn't include or reference anything that isn't needed."
msgstr ""

#: ../../../en/optimization/mapfile.txt:33
# 1cc016ab8d0e4bbaa79cbfadcf5a944f
msgid "1. Projections"
msgstr ""

#: ../../../en/optimization/mapfile.txt:35
# 57106617414143b0b4d500118045b7f3
msgid "There are two ways to define projections in a Map File. You can either use inline projection parameters or specify an EPSG code for that projection. If you use the :term:`EPSG` code method, :term:`Proj.4` looks up the projection parameters in the Proj4 database using the EPSG code as an ID. This database lookup takes significantly more resources than when the projection parameters are defined inline. This lookup takes place for each projection definition using EPSG codes in a Map File."
msgstr ""

#: ../../../en/optimization/mapfile.txt:43
# afbcb5466cba4db78e41667ad48cabdb
msgid "**Projection defined using inline projection parameters**"
msgstr ""

#: ../../../en/optimization/mapfile.txt:57
# 54a6e2352e3649ce91ac2a5b66922ea7
msgid "**Projection defined using EPSG Code**"
msgstr ""

#: ../../../en/optimization/mapfile.txt:65
#: ../../../en/optimization/mapfile.txt:82
#: ../../../en/optimization/mapfile.txt:157
#: ../../../en/optimization/mapfile.txt:173
# 056ea245d2c147b89c10e10f859326d2
# d296612718f7458f808e9a444350a048
# 0cbda70c344c4e26bf71eed58319e334
# 86fdda0ff65d40249a1edcc46e23c00f
msgid "**Optimization Suggestions**"
msgstr ""

#: ../../../en/optimization/mapfile.txt:67
# 222b0c69203043e4a2bfed446edf21fe
msgid "Use inline projection parameter definitions in place of EPSG codes."
msgstr ""

#: ../../../en/optimization/mapfile.txt:69
# 5ad2d4f3a9b8449787ffe261cca85ef6
msgid "If you want to use EPSG codes, remove all unneeded projection definition records from the Proj.4 :term:`EPSG` database."
msgstr ""

#: ../../../en/optimization/mapfile.txt:76
# db1f46ad75c549c08af2653394c9f502
msgid "2. Layers"
msgstr ""

#: ../../../en/optimization/mapfile.txt:78
# d91352f0b2554a9c902a66d29e4a76bf
msgid "For every layer in a Map File that has a status of ON or DEFAULT, MapServer will load that layer and prepare it for display, even if that layer never gets displayed."
msgstr ""

#: ../../../en/optimization/mapfile.txt:84
# 7539a960afcd4a699c99ede77272f2ff
msgid "Build lean Map Files, only include layers that you plan to use."
msgstr ""

#: ../../../en/optimization/mapfile.txt:86
# a48a6eb7c4f144debc88e1e303fb28c8
msgid "Turn off unnecessary layers; the more layers MapServer is displaying, the more time it takes. Have your opening map view show only the minimum necessary to orient the user, and allow them to turn on additional layers as needed. This is particularly true of remote WMS or very large rasters."
msgstr ""

#: ../../../en/optimization/mapfile.txt:91
# 26b5ac9ee2f0434e870f5e2f338b14f7
msgid "Related to turning off layers, is turning them on but using MINSCALEDENOM and MAXSCALEDENOM to determine at what zoomlevels the layer is available. If a map's display is outside of the layer's MINSCALEDENOM and MAXSCALEDENOM range, then MapServer can skip processing that layer. It also makes for a really cool effect, that the national boundaries magically change to state boundaries."
msgstr ""

#: ../../../en/optimization/mapfile.txt:98
# 17e32ebb1d784ff2a634d1671af2ee77
msgid "If you have a complex application, consider using multiple simple and specific Map Files in place of one large 'do everything' Map File."
msgstr ""

#: ../../../en/optimization/mapfile.txt:101
# 8640e3da5d1e4924829e93c85ff28b04
msgid "In a similar vein, each class also supports MINSCALEDENOM and MAXSCALEDENOM. If your dataset has data that are relevant at different zoomlevels, then you may find this a very handy trick. For example, give a MINSCALEDENOM of 1:1000000, county roads a MINSCALEDENOM of 1:100000, and streets a MAXSCALEDENOM of 1:50000. You get the cool effect of new data magically appearing, but you don't have MapServer trying to draw the nation's roads when the entire nation is in view!"
msgstr ""

#: ../../../en/optimization/mapfile.txt:109
# e980b6c394f74da39cd8574e4a908fc5
msgid "Classes are processed in order, and a feature is assigned to the first class that matches. So try placing the most commonly-used classes at the top of the class list, so MapServer doesn't have to try as many classes before finding a match. For example, if you wanted to highlight the single state of Wyoming, you would probably do this:"
msgstr ""

#: ../../../en/optimization/mapfile.txt:129
# 4c3ac7f46bef4776a178bf8a43f27cef
msgid "But it would be a lot more efficient to do this, since 98% of cases will be matched on the first try:"
msgstr ""

#: ../../../en/optimization/mapfile.txt:146
# db1d2635f7ed411a8bdaaf6d46863318
msgid "Use :ref:`tile indexes <tileindex>` instead of multiple layers."
msgstr ""

#: ../../../en/optimization/mapfile.txt:152
# 86f62d1faced42a79932fefcc76fdd08
msgid "3. Symbols"
msgstr ""

#: ../../../en/optimization/mapfile.txt:154
# 7f08afd544d7490f9705d689af09fb2b
msgid "When the Map File is loaded, each raster symbol listed in the symbols file is located on the filesystem and loaded."
msgstr ""

#: ../../../en/optimization/mapfile.txt:159
# 21d50b6242ac4a54b0b6ca5bb5e80d27
msgid "Only include raster symbols in your symbols file if you know that they will be used by your application."
msgstr ""

#: ../../../en/optimization/mapfile.txt:166
# b102696b3d1441969031535f8c9e366c
msgid "4. Fonts"
msgstr ""

#: ../../../en/optimization/mapfile.txt:168
# 090157c9bbe74483be58ab677e57c067
msgid "To load a font, MapServer opens up the fonts.list :ref:`fontset` file which contains an alias for the font and the path for that font file. If you have a fonts.list file with a long list of fonts, it will take more time for MapServer to locate and load the font that you need."
msgstr ""

#: ../../../en/optimization/mapfile.txt:175
# 2927c45fcd3e46f4b5c64265f722b91d
msgid "Limit the entries in fonts.list to fonts that you actually use."
msgstr ""

#: ../../../en/optimization/raster.txt:8
# 1f745e8e19564b63b8dec71225045937
msgid "Raster"
msgstr ""

#: ../../../en/optimization/raster.txt:10
#: ../../../en/optimization/tileindex.txt:10
#: ../../../en/optimization/vector.txt:10
# d439a137be66435cb532630e33612685
# bf7e73a7d9a5450e974ad7e4784fe14e
# 1bf8f3fbeb9f4420a194242e5c3c8336
msgid "HostGIS"
msgstr ""

#: ../../../en/optimization/raster.txt:13
#: ../../../en/optimization/vector.txt:13
# b13ab63db0f44bae8bf618608eeb1190
# 35420820244b444992d3280c3a7e2e33
msgid "2008/08/08"
msgstr ""

#: ../../../en/optimization/raster.txt:22
# 5d11697fab0b4413912ce6b560ac6080
msgid "Overviews"
msgstr ""

#: ../../../en/optimization/raster.txt:23
# a9468fb01b9f4828b699aa4b42e1bc30
msgid "TIFF supports the creation of \"overviews\" within the file, which is basically a downsampled version of the raster data suitable for use at lower resolutions. Use the \"gdaladdo\" program to add overviews to a TIFF, and MapServer (via GDAL) will automagically choose which downsampled layer to use. Note that overviews significantly increase the disk space required by a TIFF, and in some cases the extra disk reading may offset the performance gained by MapServer not having to resample the image. You'll just have to try it for yourself and see how it works."
msgstr ""

#: ../../../en/optimization/raster.txt:36
# e70158aac7484670aa61459c6d2f01a5
msgid "Tileindexes and Internal Tiling"
msgstr ""

#: ../../../en/optimization/raster.txt:37
# d32448bc67e34eaea2b03b1e0fe56f43
msgid "Tiling is mostly effective for cases where one commonly requests only a very small area of the image."
msgstr ""

#: ../../../en/optimization/raster.txt:40
# 8a274cfd409544639fcb30db30859371
msgid "A tileindex is how one creates an on-the-fly mosaic from many rasters. This is described in the :ref:`tileindex`. That document describes common cases where a tileindex makes sense. In particular, if you have a very large raster and most requests are for a very small spatial area within it, you may want t consider slicing it and tileindexing it."
msgstr ""

#: ../../../en/optimization/raster.txt:46
# 06c494780cef4654a97dab09c27e9265
msgid "As an alternative to slicing and mosaicing, TIFFs do support a concept of internal tiling. Like a tileindex, this is mostly effective when the requests are for a small portion of the raster. Internal tiling is done by adding \"-co TILED=YES\" to gdal_translate, e.g.:"
msgstr ""

#: ../../../en/optimization/raster.txt:59
# 6b412f20d5b443118d5059a6c82237eb
msgid "Image formats"
msgstr ""

#: ../../../en/optimization/raster.txt:61
# 3713566c7eb445b08f5eaeb36d873310
msgid "The TIFF image format is the fastest to \"decipher\", but once you get beyond a certain point, the disk reading (since TIFF is very large) may become slow enough to make it worthwhile to consider other image formats."
msgstr ""

#: ../../../en/optimization/raster.txt:65
# 1098d9b7e8984b53a8e88c3b7f7eba9c
msgid "For TIFFs larger than 1 GB, ECW images tend to render faster than TIFFs, since decompressing the data (CPU and RAM) is faster than reading the uncompressed data (disk). The downside is that ECW is not open-source, and the licensing is often prohibitive."
msgstr ""

#: ../../../en/optimization/raster.txt:70
# 0aa7d92155a54f01854fdf64c7932d80
msgid "JPEG2000 is a very slow image format, as is JPEG."
msgstr ""

#: ../../../en/optimization/raster.txt:73
# b97fd4669f59469a8da8320f3f6bf094
msgid "Remote WMS"
msgstr ""

#: ../../../en/optimization/raster.txt:75
# 8526710366e24815a2983a1fe405ffbd
msgid "Remote WMS servers are often slow, especially the public ones such as TerraServer or NASA's Landsat server. There's nothing you can do about that, except to reconsider when the remote WMS layer should be used."
msgstr ""

#: ../../../en/optimization/raster.txt:79
# 52f28b3a8c2b481cad5b739f90842727
msgid "For example, there may be a different WMS server (or a different set of imagery, or even vector outline maps) suitable for drawing the countries or states to orient the user. You could then have the WMS layer come on at a certain scale, or have the layer always available but turned off so the user can choose when to turn it on."
msgstr ""

#: ../../../en/optimization/tileindex.txt:8
# 95afecb340cd498c95b1825bee56758c
msgid "Tile Indexes"
msgstr ""

#: ../../../en/optimization/tileindex.txt:13
# 3439ca67ed7642d6b7f2f08c367b7e30
msgid "2007/08/03"
msgstr ""

#: ../../../en/optimization/tileindex.txt:21
# 948a038ad91f45caaa1b0f2809e936e9
msgid "An introduction to tileindexes, MapServer's method for doing on-the-fly mosaicing."
msgstr ""

#: ../../../en/optimization/tileindex.txt:24
# ed2fe268780542199ac59c2daa3b741b
msgid "What is a tileindex and how do I make one?"
msgstr ""

#: ../../../en/optimization/tileindex.txt:26
# 7350fb18f4564a83ba9eee447b0f7ae5
msgid "A tileindex is a shapefile that ties together several datasets into a single layer. Therefore, you don't need to create separate layers for each piece of imagery or each county's road data; make a tileindex and let MapServer piece the mosaic together on the fly."
msgstr ""

#: ../../../en/optimization/tileindex.txt:31
# cdf59cb963a44799bac8b2b767fa0c37
msgid "Making a tileindex is easy using 'gdaltindex' for GDAL data sources (rasters) and 'ogrtindex' for OGR data sources (vectors). You just run them, specifying the index file to create and the list of data sources to add to the index."
msgstr ""

#: ../../../en/optimization/tileindex.txt:38
# cffabd68dbb640108c48fcc04c70fb32
msgid "For example, to make a mosaic of several TIFFs:"
msgstr ""

#: ../../../en/optimization/tileindex.txt:47
# bbc70a85db504f0e8ed704ce23a7bdb5
msgid "And to make a mosaic of vectors:"
msgstr ""

#: ../../../en/optimization/tileindex.txt:54
# 1406d38caeb34c20a2fb0f3dcf0d6ab7
msgid "ogrtindex and gdaltindex **add** the specified files to the index. Sometimes you'll have to delete the index file to avoid creating duplicate entries."
msgstr ""

#: ../../../en/optimization/tileindex.txt:62
# 549810041fb64acd9e7693063a9d7344
msgid "Using the tileindex in your mapfile"
msgstr ""

#: ../../../en/optimization/tileindex.txt:64
# 0d60b32302a74176908c58e7c40e2f4f
msgid "Using a tileindex as a layer is best explained by an example:"
msgstr ""

#: ../../../en/optimization/tileindex.txt:76
# 2fa8cc4dde144714af51e02b10108dbf
msgid "There are two items of note here: TILEINDEX and TILEITEM. TILEINDEX is simply the path to the index file, and TILEITEM specifies the field in the shapefile which contains the filenames referenced by the index. The TILEITEM will usually be \"LOCATION\" unless you specified the *-tileindex* option when running gdaltindex or ogrtindex."
msgstr ""

#: ../../../en/optimization/tileindex.txt:82
# 8c4f031383a444319adcd02d5f190e52
msgid "Two important notes about the pathnames:"
msgstr ""

#: ../../../en/optimization/tileindex.txt:84
# 345c87281391494d88df37dc46f51a1e
msgid "The path to TILEINDEX follows the same conventions as for any other data source, e.g. using the SHAPEPATH or else being relative to the location of the mapfile."
msgstr ""

#: ../../../en/optimization/tileindex.txt:87
# 166062ad224f45c8adc4a4f5c61f01f9
msgid "The filenames specified on the command line to gdaltindex or ogrtindex will be used with the same conventions as well, following the SHAPEPATH or else being relative to the mapfile's location. I find it very useful to change into the SHAPEPATH directory and then run ogrtindex/gdaltindex from there; this ensures that I specify the correct pathnames."
msgstr ""

#: ../../../en/optimization/tileindex.txt:94
# 62bea904a39043a19a3526cff4beca58
msgid "Tileindexes may make your map faster"
msgstr ""

#: ../../../en/optimization/tileindex.txt:96
# 03da58d8875641d3a724c27fd2eefa8e
msgid "A tileindex is often a performance boost for two reasons:"
msgstr ""

#: ../../../en/optimization/tileindex.txt:98
# fbb7dd297f454d51aaf48961994450f7
msgid "It's more efficient than having several separate layers."
msgstr ""

#: ../../../en/optimization/tileindex.txt:99
# dffe099b379d4a408741718ec3745428
msgid "MapServer will examine the tileindex to determine which datasets fall into the map's view, and will open only those datasets. This can result in a great savings for a large dataset, especially for use cases where most of the time only a very small spatial region of the data is being used. (for example, citywide maps with nationwide street imagery)"
msgstr ""

#: ../../../en/optimization/tileindex.txt:105
# 5cfc44358be748019d511a28f60a26ee
msgid "A tileindex will not help in the case where all/most of the data sources will usually be opened anyway (e.g. street data by county, showing states or larger regions). In that case, it may even result in a decrease in performance, since it may be slower to open 100 files than to open one giant file."
msgstr ""

#: ../../../en/optimization/tileindex.txt:110
# 6390ccf7c38343398e1f6c1eb0ff0578
msgid "The ideal case for a tileindex is when the most typically requested map areas fall into very few tiles. For example, if you're showing state and larger regions, try fitting your data into state-sized blocks instead of county-sized blocks; and if you're showing cities and counties, go for county-sized blocks."
msgstr ""

#: ../../../en/optimization/tileindex.txt:115
# dbe86009e01a4fd38bf962cbd76c5b6f
msgid "You'll just have to experiment with it and see what works best for your use cases."
msgstr ""

#: ../../../en/optimization/vector.txt:8
# 6a434f128b9848ecbd49ff1c80ae7876
msgid "Vector"
msgstr ""

#: ../../../en/optimization/vector.txt:21
# 82fdfb4985f144c09d39f93722d99561
msgid "Splitting your data"
msgstr ""

#: ../../../en/optimization/vector.txt:23
# fb2acec603d24061a4b5151b54681da3
msgid "If you find yourself making several layers, all of them using the same dataset but filtering to only use some of the records, you could probably do it better. If the criteria are static, one approach is to pre-split the data."
msgstr ""

#: ../../../en/optimization/vector.txt:27
# f5a800f374ed4e8d93a9dd866d8283b3
msgid "The *ogr2ogr* utility can select on certain features from a datasource, and save them to a new data source. Thus, you can split your dataset into several smaller ones that are already effectively filtered, and remove the FILTER statement."
msgstr ""

#: ../../../en/optimization/vector.txt:36
# 94e6622daf9f4f2d81b2c1f8954e70c9
msgid "Shapefiles"
msgstr ""

#: ../../../en/optimization/vector.txt:37
# fb0f682bb97340579b0fc88e07d8fe00
msgid "Use :ref:`shptree` to generate a spatial index on your shapefile. This is quick and easy (\"shptree foo.shp\") and generates a .qix file. MapServer will automagically detect an index and use it."
msgstr ""

#: ../../../en/optimization/vector.txt:45
# 4a81182839064f408766e03fee8204d9
msgid "MapServer also comes with the :ref:`sortshp` utility. This reorganizes a shapefile, sorting it according to the values in one of its columns. If you're commonly filtering by criteria and it's almost always by a specific column, this can make the process slightly more efficient."
msgstr ""

#: ../../../en/optimization/vector.txt:50
# b1b9bd86a1c2481bbb15d773aa06e61a
msgid "Although shapefiles are a very fast data format, :ref:`PostGIS <input_postgis>` is pretty speedy as well, especially if you use indexes well and have memory to throw at caching."
msgstr ""

#: ../../../en/optimization/vector.txt:58
# 3ed40554cb7c406bb4cf42603a6d393a
msgid "PostGIS"
msgstr ""

#: ../../../en/optimization/vector.txt:60
# adca76b924e1495db6b04b5cd8575cd9
msgid "The single biggest boost to performance is indexing. Make sure that there's a GIST index on the geometry column, and each record should also have an indexed primary key. If you used shp2pgsql, then these statements should create the necessary indexes:"
msgstr ""

#: ../../../en/optimization/vector.txt:70
# 227d328f172947c49615ba8a1b060adf
msgid "PostgreSQL also supports reorganizing the data in a table, such that it's physically sorted by the index. This allows PostgreSQL to be much more efficient in reading the indexed data. Use the CLUSTER command, e.g."
msgstr ""

#: ../../../en/optimization/vector.txt:78
# d2f5c7056b914e02bfc0357ff9b43c2f
msgid "Then there are numerous optimizations one can perform on the database server itself, aside from the geospatial component. The easiest is to increase *max_buffers* in the *postgresql.conf* file, which allows PostgreSQL to use more memory for caching. More information can be found at the `PostgreSQL website`_."
msgstr ""

#: ../../../en/optimization/vector.txt:88
# e0054c2aee2d4a01a34aa6149d071ec4
msgid "Databases in General (PostGIS, Oracle, MySQL)"
msgstr ""

#: ../../../en/optimization/vector.txt:90
# 3c13b7aebd874460a2a9daca1d666353
msgid "By default, MapServer opens and closes a new database connection for each database-driven layer in the mapfile. If you have several layers reading from the same database, this doesn't make a lot of sense. And with some databases (Oracle) establishing connections takes enough time that it can become significant."
msgstr ""

#: ../../../en/optimization/vector.txt:96
# 31e5bc2e121d47569fdc63247673e9c8
msgid "Try adding this line to your database layers:"
msgstr ""

#: ../../../en/optimization/vector.txt:102
# dac02d87203946fc9474c35e53cca468
msgid "This causes MapServer to not close the database connection for each layer until after it has finished processing the mapfile and this may shave a few seconds off of map generation times."
msgstr ""

