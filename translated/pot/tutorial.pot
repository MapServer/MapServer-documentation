# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, Regents of the University of Minnesota
# This file is distributed under the same license as the MapServer package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: MapServer 5\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-07-01 14:35\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../../en/tutorial/background.txt:6
# 17935303fd9f445b8d162eea8977461a
msgid "Tutorial background"
msgstr ""

#: ../../../en/tutorial/background.txt:9
# 0e6befd8a4fa437a8aa0ac331afe1426
msgid "Tutorial Timeframe"
msgstr ""

#: ../../../en/tutorial/background.txt:11
# bfc4c23c96524ebe9c8a33885f92e6da
msgid "While some users can go through this tutorial in one day, those who work on each example in detail can probably expect to finish in one week."
msgstr ""

#: ../../../en/tutorial/background.txt:15
# e6e5ca075d624e82a1fc6641891a99c9
msgid "Tutorial Data"
msgstr ""

#: ../../../en/tutorial/background.txt:17
# 54214d4329d84b07b59fc73e14145630
msgid "The dataset used in this tutorial was taken from the U.S. Department of the Interior's National Atlas of the United States. You can visit their web site at http://www.nationalatlas.gov. The dataset was clipped to the upper great lakes region (Minnesota, Michigan, and Wisconsin) to reduce storage size. Additional raster images were added courtesy of the TerraSIP project at the University of Minnesota. When using this tutorial, you are encouraged to use your own dataset."
msgstr ""

#: ../../../en/tutorial/background.txt:25
# 5e276c50b0204d06b9d728e2f01dd679
msgid "Like MapServer itself, this tutorial is open and customizable to anyone. This was done in the hope that someone (or some folks) will help design and develop it further."
msgstr ""

#: ../../../en/tutorial/background.txt:29
# dbe193d4bba94b039541767846a34bcb
msgid "Download the data (and all html files) for this tutorial at http://download.osgeo.org/mapserver/docs/mapserver-tutorial.zip."
msgstr ""

#: ../../../en/tutorial/background.txt:32
# 493f8e5de3c449dc87b71480427ca0d9
msgid "Before Using the Tutorial"
msgstr ""

#: ../../../en/tutorial/background.txt:34
# 941fa6ff586346fd9c650d806a7aa524
msgid "There are some prerequisites to using this tutorial:"
msgstr ""

#: ../../../en/tutorial/background.txt:36
# bc831711118244d5bbd3188d04405567
msgid "Users will need to have a web server installed and running on their computer. This web server has to have support for common gateway interface (CGI) programs."
msgstr ""

#: ../../../en/tutorial/background.txt:39
# 1417ae88dccb468595f1aec68afb985a
msgid "Users should have a basic understanding of web servers and internet security. A poorly configured web server can easily be attacked by malicious people. At the very least your software installation will be corrupted and you'll lose hours of productivity, at worst your computer can be used to attack other computers on the internet."
msgstr ""

#: ../../../en/tutorial/background.txt:45
# ba64ed520c744aaf9e54fe2aa481105d
msgid "It is recommended that users of this tutorial read the :ref:`Introduction to MapServer <introduction>` before proceeding with this tutorial."
msgstr ""

#: ../../../en/tutorial/background.txt:49
# 5a01fb81951a4009a1b1508939fb6d4a
msgid "To use this tutorial, users will need to have a MapServer CGI program (mapserv or mapserv.exe) installed in their systems. MapServer source code is available for download :ref:`here <download>`. Documentation exists on how to compile and install MapServer:"
msgstr ""

#: ../../../en/tutorial/background.txt:54
# a466aa48a7014f9195354892a5bbde78
msgid "for UNIX users, please read the :ref:`MapServer UNIX Compilation and Installation HOWTO <unix>`."
msgstr ""

#: ../../../en/tutorial/background.txt:55
# a6f4e314306d4a52ba28fb47dd0194de
msgid "Windows users should read the :ref:`MapServer Win32 Compilation and Installation HOWTO <win32>`"
msgstr ""

#: ../../../en/tutorial/background.txt:57
# f8ec2382e3c64b208add3494d6cf352f
msgid "In addition, precompiled binaries exist for a number of platform (see the :ref:`download page <download>`)."
msgstr ""

#: ../../../en/tutorial/background.txt:61
# bcddd4feb060489793c53a7ca5ed4858
msgid "Windows, UNIX/Linux Issues"
msgstr ""

#: ../../../en/tutorial/background.txt:64
# 5267bb59df1a4b91a028fd7cfd0fa66d
msgid "Paths"
msgstr ""

#: ../../../en/tutorial/background.txt:66
# edfb7c3a9af340b5aedf6bcca44e1edc
msgid "This tutorial was created on Linux/UNIX but should work with minimal changes on Windows platform. The main differences are the paths in the map files. Windows users need to specify the drive letter of the hard disk where their tutorial files reside. Here's an example:"
msgstr ""

#: ../../../en/tutorial/background.txt:71
# 273dd71f2ad0417badc202d89bb8b284
msgid "A UNIX map file might include a parameter like this:"
msgstr ""

#: ../../../en/tutorial/background.txt:77
# fecfcc13a0514713a3c5363c54ef3766
msgid "In Windows, the same parameters might look like this:"
msgstr ""

#: ../../../en/tutorial/background.txt:83
# c4f209b3d51c4be7b6fbd66493a71889
msgid "or:"
msgstr ""

#: ../../../en/tutorial/background.txt:89
# 5f1e7144f21743cabe4b7540cef4125f
msgid "Notice that either slash or backslash works in Windows. The usual backslash may work well for you if you want to make a distinction between virtual (as in URLs or web addresses) and local paths in your map file. However, if you plan to move your application to UNIX at some point, you'll have the tedious task of switching all backslashes to slashes."
msgstr ""

#: ../../../en/tutorial/background.txt:96
# 9bea95044a87424eaea6d41b912ff2c4
msgid "While we're on the subject of paths, keep in mind that paths in mapfiles are typically relative to the system's root directory: the slash (\"/\") in UNIX or some drive letter (\"C:\") in Windows. This is true except when specifically asked to enter a URL or when referencing a URL. When working with HTML template files, paths are relative to the web server's root directory.  i.e., \"/tutorial/\" is relative to \"http://demo.mapserver.org/\". Please read http://www.alistapart.com/articles/slashforward/ for a few insights on URLs."
msgstr ""

#: ../../../en/tutorial/background.txt:107
# c27c6c1d7acb4f90892a7a9203f49df1
msgid "Executable"
msgstr ""

#: ../../../en/tutorial/background.txt:109
# 1191dfae32594a839d253bd7f1bcf144
msgid "Another issue is that UNIX executable files don't require a .EXE or .COM extensions, but they do in Windows. If you are using Windows, append .exe to all instances of \"/cgi-bin/mapserv\" or \"/cgi-bin/mapserv50\" to make it \"/cgi-bin/mapserv.exe\" or \"/cgi-bin/mapserv50.exe\"."
msgstr ""

#: ../../../en/tutorial/background.txt:116
# 4aa6c43f36c34609ad0714ed9ee0f6ea
msgid "Other Resources"
msgstr ""

#: ../../../en/tutorial/background.txt:118
# 453504cf14db430e857b6a1f3bda2aa0
msgid "Other documentation exist to give you better understanding of the many customizations MapServer offer. Please visit the MapServer documentation page at http://www.mapserver.org. There you will find several HOWTO documents, from getting started to using MapScript, a scripting interface for MapServer."
msgstr ""

#: ../../../en/tutorial/background.txt:126
# efcc3c8d8f2047618310c76bf4421da7
msgid ":ref:`Back to Tutorial home <tutorial>` | :ref:`Proceed to Section 1 <tutorial_section1>`"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:5
# 1ef851a82bfe4736a2b6d370a611470c
msgid "Example 1.1"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:7
# 918ec0ee453249a188f639ca623b5bf2
msgid "Map With A Single Layer"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:11
# d4e0327c2b5540adbbe4ef2e8a61f0f1
msgid "MapServer can create an image and dump it to a local directory or send it directly to the requesting web browser, as in this example. You can view it without the need for an html page, just enter this URL: `<http://localhost/cgi-bin/mapserv?map=/ms4w/apps/tutorial/htdocs/example1-1.map&layer=states&mode=map>`_ .  This URL will work if you are on the web server (if not, \"localhost\" must be replaced with your web server's name (e.g. \"demo.mapserver.org\") or IP address (e.g. \"140.211.15.84\")."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:19
# 3cf785fc101744768829cf10e3e7dfa4
msgid "This URL can be broken into three parts: the first part, http://localhost/cgi-bin/mapserv?, calls the MapServer CGI program. If you invoke it as is you will get this familiar message:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:27
# c7e9806ad3d34ce4a2b6c73778fe54f8
msgid "The next three parts make up the query string.  The query string contains the CGI parameters (variables and their values), with each parameter separated by an ampersand (\"&\"). So, looking at the query string:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:32
# 616b6a5336dc45409fbef58d0755ca01
msgid "The first parameter \"map\" has a value \"/ms4w/apps/tutorial/htdocs/example1-1.map\".  This tells the MapServer CGI program (**mapserv** or **mapserv.exe**) what mapfile to process/parse."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:37
# e24037c3dea04cfaa985590118d3ff08
msgid "The next parameter (*layer=states*) tells **mapserv** to \"turn on\" the states layer.  Recall that we named our layer object \"states\"."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:41
# 728778a13adb4cf3bd8014da34b9677a
msgid "The last parameter (*mode=map*) tells **mapserv** what to do with the output from the mapfile. In this case it tells **mapserv** to dump the image directly to the web browser (the client), without first creating a temporary image on the server."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:46
# 8237bf2f42644469a6a4d72e7d97e012
msgid "The MapServer *mode* CGI variable takes values other than *map*. For example if you use *mode=browse*, MapServer will dump the image to a temporary directory on the server. The browse mode will not work now but we'll come back to it again later."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:53
# fb7568d4731c41c9bf2549df2ee4d345
msgid "Mapfile Structure"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:55
# c97fede424f94d009f31bd91e72da6fb
msgid "This is what the mapfile looks like: :ref:`Example1-1.map <example1-1-map>`."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:57
# 0e38bd0a84a2431a8b572cccda1e7a3d
msgid "The :ref:`MAPFILE <mapfile>` is MapServer's basic configuration mechanism. It is made up of \"objects\" and each object can have keywords or other objects. It has a hierarchical structure such that some objects fall under other objects... on top of this hierarchy is the MAP object, all other objects belong to it. This example shows a very straightforward heirarchy of objects.  As you go through each example, the complexity of these hierarchical trees will increase."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:65
# b6657b3f362f416392c84333ad83563d
msgid "A few quick notes about mapfiles: we define each object in the mapfile with the object name and we close it with \"END\" and we precede comments with a pound (#) sign."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:69
# 746cdae800844346969a6903833aff03
msgid "Let's break \"example1-1.map\" down by objects. Its structure looks like this:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:80
# a67bceab98d142d7a559885d2c4d7e01
msgid "MAP Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:82
# ea0a60b47dd44ea7a4e4a51a13e8c118
msgid "Let's look at the keywords (parameters) within the MAP object:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:85
# 4102d3a459d4495facb20e21d5f15521
msgid "Every mapfile must start with the :ref:`MAP <map>` object--the entire mapfile is the MAP object."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:89
# a71539322d4743e59d945fc30cfe61f7
msgid "The keyword IMAGETYPE is used to define which image format the MapServer CGI program should use for output. In this case we are using indexed color PNG (similar to GIF). This could be GIF, if we compiled the GD library with GIF support, WBMP, or JPEG. We can also specify other output options (PDF, SWF, GeoTIFF) provided that we compiled support for them and specify them with the OUTPUTFORMAT object. The OUTPUTFORMAT goes beyond the scope of this tutorial but you can find out more about by reading through documentations in the MapServer web site."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:100
# 5d698d8a06744d04a1baabfea0a0abba
msgid "This parameter specifies the output extent of our map--the bounding box of our initial map.  The EXTENT values are given in this format::"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:106
# 8d421b07d9324faface9b5cd11249e38
msgid "with spaces separating each value. This needs to be in the same units as the data or, if specifying a different output projection, in the same units as the output projection."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:110
# bc98ec46d17b461f8f2e8e1281fe25d1
msgid "In this example our data is in geographic projection so the units are in decimal degrees.  You can use the utility `ogrinfo <http://gdal.osgeo.org/ogr_utilities.html>`_, which is part of the GDAL/OGR library package, to get the extent of a particular Shapefile dataset (or other supported vector formats).  Here is the command I used to get the extent for this example::"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:119
# 5c004008ff1743f0ae0a98b7c4963589
msgid "This returned the following output::"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:133
# 6a2a8852f6644cdd8c6a86719ae34cfb
msgid "You can also use ArcView or an open source GIS packages--QGIS, Thuban, etc."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:136
# cb6977641aa943f6b89cff3d12942f55
msgid "Feel free to change the values of EXTENT to get a better understanding of how it changes your map."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:140
# cf986e6848c74eaab1d80d7eaf648574
msgid "This is the size of the image (the map) that MapServer will generate, in pixels. So our map is 400 pixels wide by 300 pixels high.  Again, change this to your heart's content and see how it affects your map."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:146
# a4457f8d52e24b05bfd2591491469723
msgid "This is the path to your data layers. You can provide absolute paths (i.e. \"/ms4w/apps/tutorial/data\" or \"C:/ms4w/apps/tutorial/data\") or paths relative to your mapfile's location (in this example, you'd use \"../data\"). This path doesn't have to be web accessible, and probably shouldn't be unless you want anyone to download your raw data. It has nothing directly to do with the web so don't even think of URLs here.  Just make sure that the user running the web server (usually \"nobody\" or \"apache\" in the \\*nix world) can READ the data in the SHAPEPATH."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:157
# 1cd226c8997044d3a66229225196859f
msgid "This is the background color of your map. The values are RGB values so 255 Red, 255 Green, and 255 Blue which results in a white background.  Go ahead and play with this values."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:162
# 96cbe82ccfb74521b84385419554d6ae
msgid "LAYER Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:164
# bccc70adb6b74a27a9ff238e70c94e30
msgid "Now let's look at the LAYER object parameters:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:167
# 2af10f78bb2546c39390dda9ce591e83
msgid "Marks the beginning of a :ref:`LAYER <layer>` within the MAP object.  You can specify as many layers as you like (in Mapserver versions < 5, there was a limit that could be changed by editing the map.h header file and recompileing MapServer)."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:173
# 441ea5536f864139ab575fdb729b1290
msgid "This is the layer identifier.  MapServer uses this name to toggle the layer on and off.  It won't work in this example as we have the layer STATUS set to default.  We will get back to this in later examples."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:179
# a50e77ab0e554bc0a0e3a9d4a5eeec4f
msgid "The name of the data (Shapefile dataset in this case). MapServer supports vector data formats other than ESRI's Shapefile format through the use of OGR library (part of the GDAL software package). Please visit the GDAL project web site at `<http://gdal.osgeo.org/>`_ and read `<http://gdal.osgeo.org/ogr/>`_ to learn more about the different vector formats MapServer supports.  In addition, Jeff McKenna and Tyler Mitchell have written a detailed :ref:`guide to using vector data for MapServer <vector>`."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:190
# f5656e46cade429d8bc430940e5d7af5
msgid "What type of data is it? If it's a vector data, you can specify whether it is a POLYGON, LINE (you use LINE even if your data is technically a POLYLINE), or a POINT. You can also specify RASTER or ANNOTATION data.  Here we want to display POLYGON."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:196
# 6d6b3f59d3d54de4bd0c890df26f7e70
msgid "Layers are turned on or off based on their STATUS. DEFAULT is always on.  ON or OFF works when the LAYER name is passed as part of the query string."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:201
# 352e1f89d8e14040b924e1ce26e333cf
msgid "CLASS Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:203
# 372a9e04f90345ea8ac9952448e5e936
msgid "Let's look at the CLASS object parameters:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:206
# 48c4cf926c3d4701a34493ee536cdb34
msgid "Marks the beginning of a :ref:`CLASS <class>` object within the LAYER object. You can specify as many classes within a layer (in Mapserver versions < 5, there was a limit that could be changed by editing the map.h header file and recompiling MapServer)."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:212
# 9b5d95966b0f46b284c7ffb65d04b972
msgid "The descriptive identifier for this CLASS. LAYER objects can have multiple classes, just like MAP objects can have multiple layers. CLASS names are used by MapServer as labels for the legend so make sure to use an appropriate descriptive name when naming classes. We will talk about legends later in this tutorial."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:219
# fe7cf5d4064443f785723e8955686621
msgid "STYLE Object"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:221
# e6f99863d9c5486281786447921a9c63
msgid "And finally, let's look at the STYLE object parameters:"
msgstr ""

#: ../../../en/tutorial/example1-1.txt:224
# c82e77a176cf4c40b607a2fe77632190
msgid "Marks the beginning of the :ref:`STYLE <style>` object.  You can define multiple styles within a class.  This is useful when you want to overlay a style over another."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:229
# c9db85c4ac2e44b181e887ac01c6234e
msgid "This is the fill color of the polygon. In case the TYPE is LINE, this is the line color. The values are in RGB format."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:233
# 6fbd0e8dcf824a5f9bf11e96bc8bc750
msgid "This is the outline color of the polygons. The values are in RGB format.  MapServer doesn't draw polygon outlines by default, so if you want to see polygon boundaries, you will want to define an OUTLINECOLOR."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:238
# 3cfff7341d96475390f3efde56203b52
msgid "This ends the first example in this tutorial. You are encouraged to change the values of the keywords in the mapfile. It will help you understand what these keywords do."
msgstr ""

#: ../../../en/tutorial/example1-1.txt:244
# d4dea72ed76747378a337bbd669ce75b
msgid ":ref:`Back to Section 1 index <section1>` | :ref:`Proceed to Example 1.2 <example1-2>`"
msgstr ""

#: ../../../en/tutorial/example1-1-map.txt:6
# 6eebc03402c744c1a48c9a21ee051b84
msgid "Example1-1.map"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:7
# 47bf1ecb2dcf49df97d2a9407475beb3
msgid "Example 1.2"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:10
# e63bdc20192f4bd9990d71c234eae910
msgid "Static Map with Two Layers"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:14
# e485c0a1676a4add8375e67a3b9a1dac
msgid "As in the first example, this image was generated by linking the source of the <img> tag to this URL: `<http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-2.map&layer=states_poly&layer=states_line&mode=map>`_. This is how most of the examples in this section work."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:19
# 0ff32f8877874462b4f6456643c7c4a2
msgid "Anyway, you'll notice that the map here is the same as the first example.  Yes, but the mapfile is different. Have a look."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:22
# 1b465e5967fd465e85eb412da2951987
msgid "This is what the mapfile looks like: :ref:`Example1-2.map <example1-2-map>`"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:25
#: ../../../en/tutorial/example1-3.txt:18
#: ../../../en/tutorial/example1-4.txt:26
#: ../../../en/tutorial/example1-5.txt:44
# 353317a4622843b6b6c7fb03575b6a15
# 805c4a37235a4aec885783c777a534bc
# 91a9580629744ad98cc5c5fadb6b1c82
# 8bd66a2fb20a4ed6af2d35efba305044
msgid "MapFile Structure"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:27
#: ../../../en/tutorial/example1-3.txt:22
#: ../../../en/tutorial/example1-5.txt:48
# bd80d24596394e6aa057e46d7895067f
# 64e14f8751c542358b621bd1f840ee71
# 1579f79afbb44c25a5c355ea6922d4b6
msgid "The mapfile structure, by objects, looks like this::"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:34
# 3541f93a39574185b713cd8363f3da96
msgid "Here we split the original layer into two layers. The first layer is still a polygon layer but the :ref:`STYLE object <style>` no longer has OUTLINECOLOR, such as:"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:52
# 8b6422a540dd4cb889ed0a1ab14eb32c
msgid "The second layer is similar to the first except that the TYPE is changed to LINE and the COLOR in the STYLE is changed to the same color as the OUTLINECOLOR in the first example. This produces the same image as the first one."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:71
# 653e77a05ec043feb097f03fdd0ec8f6
msgid "So, why do it this way?"
msgstr ""

#: ../../../en/tutorial/example1-2.txt:73
# a6e74dbdf8ef4d52b173cda43df5b810
msgid "If we continue to add layers on top of the states layer, the outline will most likely be covered up by these other layers.  To still see the state boundaries after we add these other layers, we have to separate the states boundary line layer from the states polygon layer and put it on top of the other other layers.  There is order in how we define/add layers and you'll see it clearly as we proceed in this section."
msgstr ""

#: ../../../en/tutorial/example1-2.txt:83
# a255496ed7984785becdaa551e20c1ca
msgid ":ref:`Back to Example 1.1 <example1-1>` | :ref:`Proceed to Example 1.3 <example1-3>`"
msgstr ""

#: ../../../en/tutorial/example1-2-map.txt:6
# 87989bb58e864b5d820cc1429aa510bf
msgid "Example1-2.map"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:7
# 903736d7c9864408a7b56fe057540923
msgid "Example 1.3"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:10
# cda2a317efa941759d9a7ef506fc8e31
msgid "Displaying Classes in a Layer"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:12
# e823cf80d1ce4964b33951dbc9e33e79
msgid "By using non-spatial attribute information in the data, we can create a map like this:"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:20
# ddde8ace53ba410e9f2fd9e72489cdc2
msgid "This is what the mapfile looks like: :ref:`Example1-3.map <example1-3-map>`."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:32
# 92d3c7a93470461784a6bc0512c96cf0
msgid "Keywords"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:34
# f1ef50998f6e43bd887df07f9bc2876d
msgid "Our mapfile still only has two layers but the polygon layer has been broken down into two classes.  Let's have a look at the additional parameters:"
msgstr ""

#: ../../../en/tutorial/example1-3.txt:39
# 10062ecaac684b42b31365a88fc0bfee
msgid "This keyword is used to specify what attribute to use in separating the class objects.  In this example that attribute is \"CLASS\".  If you open the database file associated with this layer's shapefile, you'll see that there's a column (attribute) called \"CLASS\"."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:44
# 4738e8e1599f4beaad9dbb0c306cbc78
msgid "How do we know which attribute to use?  Well, database records in shapefiles are stored in DBF files.  You can open it in a spreadsheet program such as Openoffice.org's Calc, or in a desktop GIS software such as QGIS, Thuban, or ArcView.  If your data came with a metadata (and it should!), you can skim through through that metadata file for attribute information.  You can also use \"ogrinfo\" to display basic attribute info in your shapefiles--look back at example 1.1 (the last few lines after \"Layer SRS WKT:\" show the attribute names and types)."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:55
# ae5ea5b1698e4e9a92b05a9f26be4cd8
msgid "For each class, we specify what attribute value to use.  This is the simplest form of EXPRESSION.  EXPRESSIONs can be even more complex than this, allowing one to evaluate regular or logical expressions.  Please look at :ref:`expressions` in the mapfile reference to see what you can do with EXPRESSION."
msgstr ""

#: ../../../en/tutorial/example1-3.txt:63
# 9086959df1d54823b3e3d8b0e241f34c
msgid ":ref:`Back to Example 1.2 <example1-2>` | :ref:`Proceed to Example 1.4 <example1-4>`"
msgstr ""

#: ../../../en/tutorial/example1-3-map.txt:6
# 0031d2111bba4371b0b9a06ffa231b54
msgid "Example1-3.map"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:7
# 01546ae0e38745d0b490c7a52c52ec0d
msgid "Example 1.4"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:10
# 661eee7aae8248dfbc866e925d859c2c
msgid "Labeling the Map"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:12
# 3b01ca9340cb429ba513173d73a5d25c
msgid "We can also add labels to our map..."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:16
# 11a21e2c984341989371f2f511320083
msgid "MapServer has a very flexible labeling engine.  It supports native bitmap as well as truetype fonts.  Font scaling is supported with truetype. The labeling angles and placements can be customized...  If you take the time to learn the many parameters involved in creating good labels, you will be rewarded with informative and aesthetically pleasing maps."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:23
# b227c634206343f29fc660f827c8eb65
msgid "This is what the map file looks like: :ref:`Example1-4.map <example1-4-map>`."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:28
# 734e77a8eee14ab3bafe4d02a4cebdb3
msgid "The map file structure, by objects, looks like this:"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:38
# 1a9068cfc2364b44af72246ab6bb9986
msgid "The LABEL Object and Keywords"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:40
# bb315960da4c4ea6a9a01e5ddf745215
msgid "Here we introduce a few more parameters along with the LABEL object:"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:43
# 90658353b4b04a548127903077bd4dc7
msgid "Here we specify the full path to our truetype fonts list (or fontset) file. This file lists each of the available fonts. See the file itself and the :ref:`MapServer fontset documentation <fontset>` for more info.  FONTSET is a parameter of the MAP object."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:50
# 29f0080ded2f425b82d0f5bbe7be875c
msgid "This specifies which data attribute to use for labeling, in this case \"STATE\". LABELITEM is a parameter of the LAYER object."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:54
# ac49929c8d0a404d9043ff130a870276
msgid "Marks the beginning of the LABEL object. The label object can be used under other objects (i.e. the SCALEBAR object)."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:58
# a0bd69056feb4491a393acda56922c75
msgid "Within the LABEL object, COLOR specifies the color of the label text."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:62
# dce4d53b4c8c4534ac65428d4ac1a0a4
msgid "This specifies the shadow color of the label text."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:66
#: ../../../en/tutorial/example1-4.txt:76
# 33e419ddc02e4e4298318817a5a2db1d
# b9f33847935e4ccb86a55e3a3c156046
msgid "Since Mapserver 6, LABEL STYLE with GEOMTRANSFORM LABELPOLY must be used instead.  The tutorial files have not been updated."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:70
# af2db3079acb42db8eb1eb0c011b6e17
msgid "Specifies the shadow size. The value corresponds to the X and the Y shifts in pixels. So, \"2 2\" means two pixels wide by two pixels high."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:80
# 186086811cac463aae96898f62a4bb83
msgid "Within the LABEL object, TYPE specifies what type of font to use. We have the choice of TRUETYPE or BITMAP (the built-in fonts). We choose TRUETYPE."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:85
# 3049807174064fefb076c55af81d34b3
msgid "If you specify TYPE as TRUETYPE, you need to specify what font to use.  The value here is the \"alias\" in the font list file."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:89
# 48294471744441078f32145f07d2e9d4
msgid "If using truetype fonts, the value is size in pixels. If bitmap, you can say something like \"small\" or \"large\"."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:93
# 7097108bfaa74edeb4616bb031ae6a66
msgid "This turns truetype antialiasing on or off. Remember the value isn't on or off but TRUE or FALSE."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:97
# 1f33e55f830d4770aecb2b602b7f6cfc
msgid "Where to position the label text in relation to the label points. The value is a combination of vertical and horizontal positions. You have the following choices for vertical alignment: C for center, U for upper, and L for lower. For horizontal alignment you have the following choices: C for center, L for left, and R for right. So, to align the label text to the center of label ID you'd use the value \"CC\" (center-center). Or if you'd like it to be on the lower left of the ID, you'd use LL. Another way is to let MapServer decide the best position for your labels. For this you would use the value \"AUTO\"."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:109
# 116f6dde9e9c4787b0ae6cb1d6177529
msgid "Tells MapServer whether to generate incomplete label texts or not. The default here is not to generate fragments of a label text. The value is either TRUE or FALSE."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:114
# 529b2d530b574d4aaf0ca500fe01411b
msgid "This is the minimum distance in pixels between duplicate labels. See what happens if you increase or decrease this value."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:117
# bf6eacb5454c4ad2b432eb9cd370ee79
msgid "**BUFFER**"
msgstr ""

#: ../../../en/tutorial/example1-4.txt:119
# 20b5372e49504b5088a484d738877930
msgid "The padding (in pixels) for each label. This is used to enhance readability. A BUFFER of 4 pixels mean that no label will be drawn within four pixels of each other. Again, change to see how it works."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:124
# e6bbdf2471cd496fbdff710a14efd1be
msgid "You can also create labels separate from a POLYGON layer. You do this with the ANNOTATION data type. Have a look at the next example's map file to see how you'd implement this kind of labeling.  You will notice that the CLASS object within the \"label\" layer has a COLOR parameter value of \"-1 -1 -1\". The negative number tells MapServer to give this CLASS a transparent color (the label IDs don't show up). Once again, play with the values to understand how it affects the map."
msgstr ""

#: ../../../en/tutorial/example1-4.txt:134
# 34f78204a27b4d12970bddba44e4ed0a
msgid ":ref:`Back to Example 1.3 <example1-3>` | :ref:`Proceed to Example 1.5 <example1-5>`"
msgstr ""

#: ../../../en/tutorial/example1-4-map.txt:6
# 6dba1a6405b5471e8122f33a475a2eed
msgid "Example1-4.map"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:7
# 36b837dfadb0408f9d9fd79f62976686
msgid "Example 1.5"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:10
# b08d87cdff5443fd86f48a96e03efe35
msgid "Adding a Raster Layer"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:14
# e6805f41ae27494499417eced7cd0b38
msgid "In addition to vector data support (point, lines, polygons, and annotations), MapServer can also display raster data. Through the use of GDAL library, MapServer can input and output multiple raster formats. Whereas in versions prior to 4.x raster input is limited to single layer, grayscale or indexed color images, recent MapServer versions support RGB and multispectral (multi-layer) images. This example shows how to select what layers to display when using multispectral data."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:25
# 86379b72e2bc42539924724081cc8c5a
msgid "There might be a noticeable performance hit when using RGB and multispectral images."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:28
# ad1cc50799284fa0a381295fdd79916d
msgid "Because MapServer 5.x uses AGG or GD version 2.0.x to generate output images, it supports RGB (24-bit or true color) output as well. So, along with 8-bit (indexed color or grayscale) PNG8, you can now also use PNG (true color) for output. This example uses PNG as IMAGETYPE."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:36
# 2883a626f83e4fa382bef6b5d9bcc0b9
msgid "As with RGB input, there might be a noticeable performance hit when using PNG compared to PNG8."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:39
# d4e1d71e80984caab8cecc43dc38749a
msgid "MapServer can actually use GDAL to generate output images as well, but that's another topic. If you want to know more about it, look at the :ref:`OUTPUTFORMAT <outputformat>` object in the mapfile reference."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:46
# 86f5a7c6b78c40d985be2bf919f8f258
msgid "This is what the mapfile looks like: :ref:`Example1-5.map <example1-5-map>`"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:59
# 12726e6049d740b9a2f123934260db96
msgid "When you look at the mapfile, you'll see that the new LAYER object is added below (after) the state POLYGON layer. Why? MapServer displays layers in reverse order: last in, first out (LIFO). The first layer defined in the mapfile is drawn at the bottom of the map."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:64
# 800862f2f33e495d8216c5ebb5888580
msgid "So, if we have drawn the state POLYGON layer, it would be on the bottom. Since the raster layer gets drawn on top of it, we won't see it. That's why the first layer gets the STATUS value of OFF. The state LINE layer is defined below the raster layer so it gets drawn on top (and you can see it). This is why we separated the state LINE layer from the state POLYGON layer. Of course the labels get drawn on top of everything."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:71
# 2c0a8d3c75c74a6f9edc23eca224296a
msgid "MapServer can automatically turn layers on or off based on the status of other layers (say you want the states polygon layer turned off when the raster layer is turned on). This is done by using the REQUIRES parameter. Keep this in mind as you might want to use it once you start creating your own MapServer applications."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:78
# 683eeaa47d7c4a40a9130e45d5f097c8
msgid "Parameters"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:80
# 56154477e33b4dc484751697039ac5de
msgid "Let's have a look at the new parameters introduced in the mapfile:"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:83
# 8209b913cad242aeb50908fee5b696e3
msgid "PNG is the 24-bit or true-color version of the PNG format.  By the way, try changing this value to PNG8.  Notice the time it takes to generate the image using either formats. In choosing between true color and indexed color, take into account the time it takes to generate the image."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:90
# 733dcfc3e0a84cb189c7bb289bccc472
msgid "Points to the path of the symbol definition file. The symbols in this file are referenced by the SYMBOL parameter in the :ref:`CLASS <class>` object.  It's not really needed at this point but I thought I'd throw this here now.  Please refer to the :ref:`Cartographic Symbol Reference <sym_construction>` for further information."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:97
# 1ebe1fccce8b4b80a99e268241326af2
msgid "In the newly added LAYER object, the DATA parameter points to a GeoTIFF image.  Like vector datasets, MapServer supports multiple raster file formats. This support is accomplished through use of the GDAL library. For more information on the different raster formats supported by MapServer and for general discussion on the use of rasters in MapServer, please read the :ref:`Raster Data Reference <raster>`."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:106
# d9e31dc6aba44d319e7330df50e27be3
msgid "When using raster data (images) we use the value RASTER for the parameter TYPE, as opposed to the POLYGON, LINE, and POINT values for vector data and ANNOTATION for label IDs."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:111
# 50da9616d8824e338878c787b8212472
msgid "This LAYER object parameter was added in MapServer 4.x. The :ref:`PROCESSING <layer>` keyword has many values but in this case we are using it to select which bands in a multispectral image to display. The values here are strings that will be passed to the GDAL library."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:118
# 504df45c70824a06acfbb35dbda4747b
msgid "This parameter tells MapServer what pixel values to render as background (or ignore). You can get the pixel values using image processing or image manipulation programs (i.e. Imagine, Photoshop, Gimp)."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:124
# d957a4f3c5054ef88c262efd1abcb452
msgid "RGB vs Indexed Color Image"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:126
# 5b18209ae88046edbcdadf373aae7012
msgid "To compare map creation speed when using RGB image as opposed to indexed color image, replace the following lines in the mapfile:"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:137
# 5ff96676ce8b413297fb03c57c170b24
msgid "with these:"
msgstr ""

#: ../../../en/tutorial/example1-5.txt:147
# 4741f75a91d844c4b9d29678d9085705
msgid "Also, try changing the IMAGETYPE from PNG to PNG8."
msgstr ""

#: ../../../en/tutorial/example1-5.txt:151
# 9877890629304de3b6e6c16af1e35eb2
msgid ":ref:`Back to Example 1.4 <example1-4>` | :ref:`Proceed to Example 1.6 <example1-6>`"
msgstr ""

#: ../../../en/tutorial/example1-5-map.txt:6
# a393e1f9d4c543a29873b580f113d555
msgid "Example1-5.map"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:7
# ef62c94020134a4c993efe1c1727ca67
msgid "Example 1.6"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:10
# bf83ebe2ced04be58fd15a9f7bfab8c2
msgid "Defining Projections and Extents"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:14
# 3d13cc004e47460fbab9e9f45e61f52c
msgid "Whoa! What happened here?"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:16
# bc9981217ab541c58a5f2330fde6b7fb
msgid "You've just experienced on-the-fly reprojection. When a PROJECTION object is defined in the mapfile, MapServer passes the layer and projection info to the Proj.4 library which does the reprojection.  For more information about the Proj.4 library, please visit `<http://proj.maptools.org/>`_."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:21
# fcb2902ae09449d39d1000ddcd77d996
msgid "This example attempts to shed some light on the projection support in MapServer."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:23
# 5536df006d5c46a7bd9a521e1947cc83
msgid "This is what the mapfile looks like: :ref:`Example1-6.map <example1-6-map>`"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:25
# 352373df2084480481817b3a35ba78f7
msgid "The first thing you might have noticed with our mapfile is the original EXTENT has been commented out and the new EXTENT values don't look anything like latitude and longitude values. Also, we have added a PROJECTION object near the top and within each of our layers."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:30
# f1b86cce82c545d29ca62e5d164d7a71
msgid "Let's have a look at the new object and parameter::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:34
# 9bf0fdd6e8d14d828b244b969f766f8e
msgid "The extent we provide to MapServer needs to be in the same units as the output projection.  Since Lambert Azimuthal Equal-Area's units are in meters, we have to give the new extent in meters.  We can calculate the new extent using ArcView or some other GIS package, or you can use Proj.4's cs2cs utility.  The command below is what can be used to reproject the original extent values::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:42
# aa41cebae26042e98580b6f61f245c09
msgid "After typing the command, enter the southwestern coordinate pair (the lower left coordinates), separated by a space::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:47
# d492dcdb3063427f86a8d0b5eb3fdcb2
msgid "to which the \"cs2cs\" utility gives the values::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:51
# df542a61e7814c4fa1099ead72c61c46
msgid "I then type the northeastern coordinate pair (upper right corner coordinates), again separated by space::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:56
# cbd1e412f0154325a3cbe96c27d02c16
msgid "and the following values are returned::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:60
# a0cb6cafd62c48c9bcd60e996273c08a
msgid "You will notice that \"cs2cs\" returns a set of three values.  You can ignore the third value, 0.000, as it means to represent altitute (which we're not using). Anyway, we can now present the EXTENT as::"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:66
# da6a065f8730443992a4b4245e710229
msgid "But it doesn't match up the extent above, you say.  Well, that's what usually happens when you reproject -- the map doesn't necessarily get centered as you'd expect.  You can fudge around it, taking a few thousand meters off to the left and adding a few to the right.  Or, you can use a graphical GIS package to give you the extent. `Here are the instructions <http://biometry.gis.umn.edu/tutorial/arcview_extent.html>`_ for getting `EXTENT` using ArcView."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:74
# 45d600b66dc1449a94b1398e044e8437
msgid "MapServer can take projection definitions in two ways. The first is shown in the mapfile's output PROJECTION object (the first PROJECTION block). This is the traditional way of passing parameters to the Proj.4 library. The other way is to use the EPSG codes. These codes are standard projection codes (or spatial reference identifiers) as defined by the European Petroleum Survey Group (EPSG). In the case of our Lambert Azimuthal Equal-Area projection, it has a code of \"2163\". If you comment out the four lines after PROJECTION and uncomment the line \"init=epsg:2163\", this will provide the same information to Proj.4. If you want to learn more about EPSG codes, have a look at \"/usr/local/share/proj/epsg\" or \"C:/proj/nad/epsg\" (\"/ms4w/proj/nad\" in MS4W)."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:85
# 954db2510caa49648469a188615f0fed
msgid "Also, check out the EPSG web site at `<http://www.epsg.org>`_."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:87
# 08feb6d9ae244324975dcf43723f4f59
msgid "If you need to learn more about projections, please look through some of the links below:"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:89
# 829c1375421d46cb9dc54891ed9038cd
msgid "`<http://www.colorado.edu/geography/gcraft/notes/mapproj/mapproj_f.html>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:91
# b904c66a397c46838aab0d174ebed7d7
msgid "`<http://www.geography.hunter.cuny.edu/mp/>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:93
# d29635cf95244a3d8b114768dde0d8c6
msgid "`<http://www.nationalatlas.gov/articles/mapping/a_projections.html>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:95
# 35fa264c25e445cca648fffe63190eb2
msgid "`<http://en.wikipedia.org/wiki/Map_projection>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:97
# 19c6d105d8f544e8821a41aca8c34d0e
msgid "`<http://erg.usgs.gov/isb/pubs/MapProjections/projections.html>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:99
# b81a6b832d5c430aa9b46692d97fc8f1
msgid "`<http://spatialreference.org/>`_"
msgstr ""

#: ../../../en/tutorial/example1-6.txt:101
# d38605d1585547428f5adff605125419
msgid "You can find more by searching the web for \"map projection\"."
msgstr ""

#: ../../../en/tutorial/example1-6.txt:105
# 85f9d122ddd14c829cf1c2b7290bf672
msgid ":ref:`Back to Example 1.5 <example1-5>` | :ref:`Proceed to Example 1.7 <example1-7>`"
msgstr ""

#: ../../../en/tutorial/example1-6-map.txt:6
# 01fb872ea7ce432cbbc5913641d5f1f7
msgid "Example1-6.map"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:7
# d754a040f08d4e78ad317804e97e3fdd
msgid "Example 1.7"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:10
# 85db737378f349b482abfa0aca8db18e
msgid "Adding OGC WMS Layers"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:14
# 2ee3f3b9f1794fb78e211da30607eda2
msgid "Another exciting feature of MapServer is its ability to use layers from other map servers. In this case, a MapServer application becomes a WMS (or WFS) client. MapServer can also share (or serve up) the layers in the mapfile to other map servers. This makes an application a WMS (or WFS) server. What is WMS or WFS? These are \"web-based interoperability service\" specifications published by the Open Geospatial Consortium (OGC). WMS stands for Web Map Service and WFS for Web Feature Service. The difference between these two specifications, in simple terms, is that WMS uses web raster formats (PNG, GIF, JPEG) to share layers while WFS uses GML, the Geography Markup Language. A third OGC interoperability specification is the Web Coverage Services specification or WCS.  MapServer supports WCS at the server level only. To find more information about WMS, WFS, and WCS go the the `OGC's web site <http://www.opengeospatial.org>`_ and look for the `OGC Implementation Specifications <http://www.opengeospatial.org/specs/?page=specs>`_ or `OGC Abstract Specifications <http://www.opengeospatial.org/specs/?page=abstract>`_. The MapServer web site also has :ref:`documentation <documentation>` and `WIKI pages <https://github.com/mapserver/mapserver/wiki>`_ for these specifications."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:32
# c515563e33d34a4b8ea13a5ef979f867
msgid "This example shows you how to add a WMS layer in your mapfile."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:35
#: ../../../en/tutorial/example1-8.txt:19
# 1768827da5bd4eb586f65ceb5e2035ba
# c26b307b71cb4237b171b102dfc16fdc
msgid "The MapFile"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:37
# 64223ab284e1421ba935cc347e0d076e
msgid "This is what the mapfile looks like: :ref:`Example1-7.map <example1-7-map>`"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:40
# df864dcb08464175b25ff48c7fa0ca4c
msgid "LAYER Object and WMS Parameters"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:42
# d6f272fd7eae48a1963cd81801d04adb
msgid "Let's have a look at the WMS layer:"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:45
# d776c0376f574aa482c3b6b66cbd9b8c
msgid "Marks the start of the WMS LAYER object."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:48
# d13bc441d7a44245a25313ef80448f2d
msgid "The LAYER identifier."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:51
# 3bfd42fe311b46d3a68075c64f45b47e
msgid "Since this the WMS layer is an image, we use RASTER as LAYER TYPE."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:54
# b8b9819d5a7d421ea216f5b66320c37c
msgid "Ignore the black background color"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:57
# fad98dc4f9674116afb8af5d8621de60
msgid "Turn this layer off by default."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:60
# 56a663dcd2734370829b62ffbbe74beb
msgid "The type of LAYER connection to use. The default is LOCAL."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:64
# 6c5a118010d94725956f54c6d69b22dd
msgid "If we have to be explicit, we would add CONNECTIONTYPE LOCAL to all othe vector and raster layers in our mapfile. Instead we only define connection types that are external. WMS is an external data layer, coming from another map server."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:70
# 9ba09f1264484704a6db9af142a6cc19
msgid "The connection string that allows us to *get* the data from another server. In the case of WMS connections, this is a URL.  If we were using a PostGIS database, it would be an SQL statement.  Please note that the string has to be in a single line in your mapfile."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:76
# 6468289c0a11406fb57d61001f7be027
msgid "marks the beginning of the METADATA object for our WMS layer. MapServer uses the parameters defined within this object along with the CONNECTION parameter above to form a valid WMS request to the WMS server."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:82
# 6e9872ec877a4490bd92af6043a243cd
msgid "The WMS projection.  Sometimes the WMS server supports more than one projection.  If this is the case you might want to request the map in your output projection (epsg:2163).  Unfortunately, the JPL server doesn't support this projection."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:88
# ef23dc0d4e4b498f9186f2d0671fdd11
msgid "The WMS layer name. This is like adding the parameter \"layers=modis\"."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:91
# cfcce8ff62f546dd96831197a2bdc564
msgid "The WMS version the server complies to.  For more options, see :ref:`ogc_support`."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:95
# 87b3413568054cdbbe5b68d38e71a4f8
msgid "The image format we expect to be receiving from the WMS server. You can try replacing the value with *image/png* or something else."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:99
# a0da67c6c7034f36ba787557282113ab
msgid "marks the end of the METADATA object"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:101
# 4547cef9887e45fe85261dc3e458e7c3
msgid "To know more about adding WMS layers to your applications, please visit the :ref:`MapServer WMS Client Howto <wms_client>`."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:105
# 6e6b4367f61c44c2b6e04cfdf6d4fa51
msgid "WEB Object Parameters"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:107
# e345c731bfa043e393294942ffb23ebd
msgid "In addition to adding the WMS layer object, there's also a new object under MAP. This is the WEB object. Within the WEB object are two parameters:"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:110
# 2c69847607f640fd96605f9ddf899ee9
msgid "The absolute local path to a web accessible temporary directory. The user running the web server processes should be able to write to this directory. Make sure that the path includes a slash (/) at the end. (Your IMAGEPATH might look something like this: \"/home/apache/htdocs/tmp/\" or \"C:/Inetpub/wwwroot/tmp/\".)"
msgstr ""

#: ../../../en/tutorial/example1-7.txt:117
# dce2f006e8394c4baf2676369a50657b
msgid "This is how IMAGEPATH will appear relative to the web server's root directory. If we have to type the full URL for this, it will be \"http://terrasip.gis.umn.edu/tmp/\". Make sure that the path includes a slash (/) at the end."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:124
# 4896130791ae4cd78684f3955d8a0c4b
msgid "Finally, within the MAP object, I added a new parameter: NAME. This is the identifier for the MAP object. MapServer uses this as prefix to all images it creates and dumps to the *tmp* directory.  It's not needed at this point but it also doesn't hurt to have it."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:129
# 26dd93f6e42445b1abe801c38ebd2a7b
msgid "If you would like to share your data layers to other map servers, you will need to add METADATA objects within your MAP object and within each of the LAYER objects you would like to share. All the WMS layers that you added from another server will automatically be cascaded and will also become available to others. To know more about how to make your MapServer application become a WMS server, please read the :ref:`MapServer WMS Server HowTo <wms_server>`.  Documentation also exists for configuring MapServer applications to support the WFS standard, both as a :ref:`server <wfs_server>` and as a :ref:`client <wfs_client>`."
msgstr ""

#: ../../../en/tutorial/example1-7.txt:142
# aeb54b46030a4b74b5131d5f1ac58339
msgid ":ref:`Back to Example 1.6 <example1-6>` | :ref:`Proceed to Example 1.8 <example1-8>`"
msgstr ""

#: ../../../en/tutorial/example1-7-map.txt:6
# f338e2453ddb4214aaaeff197196254b
msgid "Example1-7.map"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:7
# d5b5a23b42ed41349b4e9321e06c62f6
msgid "Example 1.8"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:10
# 7ae8d2a5daf24f8289a5e5f8b6048c0b
msgid "Changing the Map's Output Format"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:14
# 304ed8c3577b4864b6e7fad87cc3fc5d
msgid "Depending on the format you choose, the image may not display on your browser. If the link fails to display on your browser, right click on the graphic above and save the link as whatever format you specified on your mapfile."
msgstr ""

#: ../../../en/tutorial/example1-8.txt:21
# 72031ae082864fbe9124e74c9587040f
msgid "Here's the mapfile: :ref:`Example1-8.map <example1-8-map>`"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:24
# b8c2b18e76f9409a8e0d0081db391228
msgid "OUTPUTFORMAT Object"
msgstr ""

#: ../../../en/tutorial/example1-8.txt:26
# db2032a7e84b42358482ba9b198ee358
msgid "Our mapfile now contains a new object, OUTPUTFORMAT. This object is defined within the MAP object and is used in conjunction with the IMAGETYPE keyword.  Depending on the libraries you compiled with MapServer, you can have several output format choices.  The AGG library provides PNG, PNG8 and JPEG; The GD library provides GIF; the GDAL library, a source for many of MapServer's input formats, can also provide output to PNG, JPEG, TIFF/GeoTIFF, and other raster formats; the Cairo library provides PDF, PNG and SVG output.  Have a look at the OUTPUTFORMAT object and experiment by changing the IMAGETYPE keyword on you mapfile. The NAME of your OUTPUT format should be used as your IMAGETYPE value ex: IMAGETYPE png or IMAGETYPE png24)."
msgstr ""

#: ../../../en/tutorial/example1-8.txt:38
# d0e424db9ea947f5beb279846035fe1c
msgid "Please consult the :ref:`OUTPUTFORMAT object reference <outputformat>`."
msgstr ""

#: ../../../en/tutorial/example1-8.txt:42
# eaace22a023e410297e0145e7b4e8b95
msgid ":ref:`Back to Example 1.7 <example1-7>` | `Proceed to Example 1.9 <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-9.map&layer=states&layer=modis>`_"
msgstr ""

#: ../../../en/tutorial/example1-8-map.txt:6
# 3311814db4874ff0a6e9863f1fa0e864
msgid "Example1-8.map"
msgstr ""

#: ../../../en/tutorial/index.txt:8
# a30056a886034eb3905b3017bd511e8c
msgid "MapServer Tutorial"
msgstr ""

#: ../../../en/tutorial/index.txt:10
# 8c519017a56a4e4a9fd3b6e2ca2922ad
msgid "Pericles S. Nacionales"
msgstr ""

#: ../../../en/tutorial/index.txt:11
# 711b9e985049496d8be7738b4736b32f
msgid "pnaciona at gmail.com"
msgstr ""

#: ../../../en/tutorial/index.txt:12
# 9f2369b605de48609de6462ca2ad5e31
msgid "Jeff McKenna"
msgstr ""

#: ../../../en/tutorial/index.txt:13
# 5749c63524dc40d5a3e39b9cb7f2929d
msgid "jmckenna at gatewaygeomatics.com"
msgstr ""

#: ../../../en/tutorial/index.txt:14
# e63b176854554cad9171c02ac3374f46
msgid "2010-04-07"
msgstr ""

#: ../../../en/tutorial/index.txt:16
# 40879ee6d6e44f9db68bb81f14f0fc3a
msgid "This tutorial was designed to give new users a quick (relatively speaking) introduction to the concepts behind MapServer. It is arranged into four sections with each section having one or more examples and increasing in complexity.  Users can jump to any section at any time although it is recommended that absolute beginners work on the first three sections sequentially."
msgstr ""

#: ../../../en/tutorial/index.txt:23
# 7739d2c6c86a4e35bd7823c6637d7ab6
msgid "Section one focuses on basic MapServer configuration concepts such as layer and class ordering, using vector and raster data, projections and labeling.  Section two provides examples on how to use HTML templates to create a simple interface for an interactive web mapping application. Section three introduces the use of HTML templates to provide a \"query\" interface. Finally, section four introduces some advanced user interface concepts."
msgstr ""

#: ../../../en/tutorial/index.txt:42
# 5a9404a04f75473ea9e0bfebbd71d0fb
msgid ":ref:`Begin tutorial <tutorial_background>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:4
# f8a62b2d2247475eaab2f48e3983a876
msgid "Section 1: Static Maps and the MapFile"
msgstr ""

#: ../../../en/tutorial/section1.txt:6
# 8880ded8935e4dc8a9a9ec5590f274b9
msgid "Take a Shapefile dataset. Any Shapefile dataset.  We can use MapServer to display that Shapefile dataset in a web browser. Look..."
msgstr ""

#: ../../../en/tutorial/section1.txt:10
# 533ba81e232c4dcc86a3be1428c5f92b
msgid ":ref:`Example 1.1 - A map with a single layer <example1-1>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:12
# 3f90473de2614fcd8d02f69bcacf4783
msgid "We can display the same Shapefile dataset repeatedly. We can display the polygon attributes in one LAYER and the line attributes in another..."
msgstr ""

#: ../../../en/tutorial/section1.txt:16
# 2b77dfec08994f1c9d7c1b0d0b510252
msgid ":ref:`Example 1.2 - A map with two layers <example1-2>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:18
# 71f97ca4768e4dce82fd8ee41d27c741
msgid "And we can select which parts of the Shapefile dataset to display. We do this using the CLASS object..."
msgstr ""

#: ../../../en/tutorial/section1.txt:21
# 3f600e5750a245a08498ae88fb115548
msgid ":ref:`Example 1.3 - Using classes to make a \"useful\" map <example1-3>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:23
# 5ebad1c910dc47f8be45cad51a2a4194
msgid "We can also label our maps..."
msgstr ""

#: ../../../en/tutorial/section1.txt:25
# 04fd62622356447aaadd799d8ec4aa51
msgid ":ref:`Example 1.4 - Labeling layers and label layers <example1-4>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:27
# d416a8565c4341dfa2a4b2d6b5fbea45
msgid "Or add raster data such as satellite images, aerial photographs, or shaded reliefs..."
msgstr ""

#: ../../../en/tutorial/section1.txt:30
# 29e9fb2defaf447589a82a2c55eca78b
msgid ":ref:`Example 1.5 - Adding a raster layer <example1-5>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:32
# e4e6cf2f2f394ff1831e6f8c684c8f08
msgid "We can reproject our data from just about any projection to just about any... Yeah, check it out!"
msgstr ""

#: ../../../en/tutorial/section1.txt:35
# ff05906c6ac64ec0aa33116325cc3cbb
msgid ":ref:`Example 1.6 - Projection/Reprojection <example1-6>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:37
# 0683cfd0fe0b4512bfd3ee2227e9c486
msgid "And we can use layers from other map servers on the Internet (for example WMS servers)..."
msgstr ""

#: ../../../en/tutorial/section1.txt:40
# 67794a2a9f0d4387ad2209c10aa43743
msgid ":ref:`Example 1.7 - Adding a WMS layer <example1-7>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:42
# 6306c5f9f9d74d90835d766338c4799a
msgid "MapServer can output to various formats such as PDF and GeoTIFF."
msgstr ""

#: ../../../en/tutorial/section1.txt:44
# cbb6e3c9affc4378acdbfdaec44d0169
msgid ":ref:`Example 1.8 - A different output format <example1-8>`"
msgstr ""

#: ../../../en/tutorial/section1.txt:46
# 49ae3c4220774834948cf273ae4483ad
msgid "MapServer not only generates static maps, it can also create interactive maps..."
msgstr ""

#: ../../../en/tutorial/section1.txt:49
# 704b6c13d23a4f75a157219611ecb57b
msgid "`Example 1.9 - The difference between map mode and browse mode <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example1-9.map&layer=states&layer=modis>`_"
msgstr ""

#: ../../../en/tutorial/section1.txt:53
# 95af46a86d9444f194be25087df6f226
msgid ":ref:`Back to Tutorial home <tutorial>` | :ref:`Proceed to Section 2 <section2>`"
msgstr ""

#: ../../../en/tutorial/section2.txt:4
# 45839fa9c31242e9a5e5042e58ed1597
msgid "Section 2: CGI variables and the User Interface"
msgstr ""

#: ../../../en/tutorial/section2.txt:6
# 1c96d644fb764380aa34fd6971f3c3e2
msgid "So far we have only looked at the mapfile when creating maps. In creating web mapping applications, it is usually our intention to make maps that can be changed by the user (of the application) interactively. That is, a user should be able to change the content of (or the information in) the map. To accomplish this interactivity, we use the MapServer HTML templates."
msgstr ""

#: ../../../en/tutorial/section2.txt:14
# 33dff40682e847c594353a4e416e55d9
msgid "HTML Templates"
msgstr ""

#: ../../../en/tutorial/section2.txt:16
# 2ed970f28e384736b41ffb2536d1149f
msgid "A MapServer HTML template is essentially an HTML file with a few MapServer specific tags.  These tags are the MapServer CGI variables and are enclosed in square brackets \"[]\".  When the MapServer CGI program processes an application, it first parses the query string and the mapfile, and produces the necessary output. Some of this output will need to be written to the HTML template file which you would have to also specify in the mapfile using the web template keyword (or in a separate HTML initialization file). The CGI program will replace all the variables in the HTML template with the proper value before sending it back to the web browser. If you are to directly view an HTML template in a web browser, there won't be any maps rendered and you will instead get blank images and other junk."
msgstr ""

#: ../../../en/tutorial/section2.txt:30
# 7d4a199a9555485193656a5f85159db0
msgid "Variables"
msgstr ""

#: ../../../en/tutorial/section2.txt:32
# a9633d9c8ab448e4a5e64e3216fcf384
msgid "MapServer provides several variables for web mapping: the \"img\" variable which you've seen in Example 1.9 is but one example. There area few core CGI variables originally designed as part of the mapping interface but practically all the mapfile parameters can be defined as variables. The definitive reference to the Mapserver CGI variables can be found :ref:`here <cgi>`."
msgstr ""

#: ../../../en/tutorial/section2.txt:39
# e5c44f9567e5469798fc6a6d54b72fc3
msgid "We can also define our own variables, which MapServer will pass along to our application.  For example, we can create a variable called \"root\" to represent the root directory of this tutorial, the value for \"root\" will then be \"/tutorial\". When the MapServer CGI program processes our HTML template, it will replace every instance of he \"[root]\" tag with \"/tutorial\". You will see this in action for each of the following examples."
msgstr ""

#: ../../../en/tutorial/section2.txt:48
# 51cf654d73164b7880e24eee8e0562f6
msgid "Examples"
msgstr ""

#: ../../../en/tutorial/section2.txt:50
# cd4636e6814342aca48dae2a8760b6e5
msgid "So, let's build an interactive interface for our application..."
msgstr ""

#: ../../../en/tutorial/section2.txt:52
# 0a4ed325aaa14a2abd2f36a335c5e44e
msgid "Users of a web mapping application should be able to pan and zoom on the map: `Example 2.1 - Pan and Zoom Controls <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-1.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:55
# 9a8a70b9c9db4d5d8c87289f7ef3da94
msgid "They also should be able to turn on and off layers on a map: `Example 2.2 - Layer Control <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-2.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:58
# 9dd3d891d1e744ed848b4fb479988462
msgid "A map should always include a scalebar. `Example 2.3 - Adding a Scalebar <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-3.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:61
# 62929b72854c43e6818374bf7f268233
msgid "If users are to navigate through the map, a reference map should be provided: `Example 2.4 - Adding a Reference Map <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-4.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:64
# afb8df84c2f44683b26bb247f5eb65d8
msgid "The map should include a legend. `Example 2.5- Adding a Legend <http://demo.mapserver.org/cgi-bin/mapserv?map=/osgeo/mapserver/tutorial/htdocs/example2.map&layer=states&zoom=0&mode=browse&root=/tutorial&program=/cgi-bin/mapserv&map_web=template+example2-5.html>`_"
msgstr ""

#: ../../../en/tutorial/section2.txt:69
# 95797f9df748479cbcf660b1f46d59ce
msgid ":ref:`Back to Section 1 index <tutorial_section1>` | :ref:`Proceed to Section 3 <tutorial_section3>`"
msgstr ""

#: ../../../en/tutorial/section3.txt:4
# 09bf431e8d034b0ca1eb4d57764c0c0b
msgid "Section 3: Query and more about HTML Templates"
msgstr ""

#: ../../../en/tutorial/section3.txt:6
# f7655797e5794e9f897e9fe208946c89
msgid "To learn more about query and HTML templates with MapServer, see examples 3.1 to 3.4 in the `Tutorial Viewer <http://demo.mapserver.org/tutorial/section3.html>`_."
msgstr ""

#: ../../../en/tutorial/section3.txt:13
# 69b331ea13b74fdd9189052abf9f9aa0
msgid ":ref:`Back to Section 2 index <tutorial_section2>` | :ref:`Proceed to Section 4 <tutorial_section4>`"
msgstr ""

#: ../../../en/tutorial/section4.txt:4
# 67ceff7dbc3c4efd94d615c509661be3
msgid "Section 4: Advanced User Interfaces"
msgstr ""

#: ../../../en/tutorial/section4.txt:6
# 64f20ec1097b43d2b91082828fc37b2b
msgid "To learn more about advanced navigation such as pan and rubber-band zoom with Javascript and MapServer CGI, see examples 4.1 to 4.4 in the `Tutorial Viewer <http://demo.mapserver.org/tutorial/section4.html>`_."
msgstr ""

#: ../../../en/tutorial/section4.txt:13
# ec03a3fa610a4c9eb835aa43f0fd0818
msgid ":ref:`Back to Section 3 index <tutorial_section3>` | :ref:`Tutorial home <tutorial>`"
msgstr ""

